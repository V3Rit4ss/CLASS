group_by(gender) %>%
ggplot(aes(x=gender, y=income))+
geom_boxplot()
(is.na(income))
(is.na(welfare1$income))
(welfare1$income)
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_line()
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_bar()
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_bar(stat = "identity")
#(4)성별 비율을 도표로 나타내고 그래프로 시각화한다
ggplot(welfare1, aes(x=gender, fill = gender))+
geom_bar(width = 0.2)+
scale_fill_manual(values = c('female'='red', 'male'='blue'))+
labs(x= '성별',
y= '명 수',
title= '성별 비율')
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_bar(stat = "identity")
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_point()
welfare1 %>%
filter(income) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, y=n))+
geom_point()
#(2) ggplot2 그래프에서만 저장할 수 있는 방법.
ggplot(iris, aes(x= Petal.Width, y= Petal.Length, col=Species)) +
geom_point(aes(size= Petal.Width), pch = 3, alpha=0.5)
table(is.na(welfare1)) # F= 6213913  T =9733535 <-(na인 데이터갯수)
mm<- as.data.frame(table(welfare1$gender))
mm
colnames(mm) <- c('성별','수')
mm
ggplot(mm, aes(x= gender, y=Freq)) +
geom_bar(stat = 'identity')
ggplot(mm, aes(x= '성별', y=Freq)) +
geom_bar(stat = 'identity')
ggplot(mm, aes(x= '성별', y='수')) +
geom_bar(stat = 'identity')
ggplot(mm, aes(x= '성별', y='수')) +
geom_bar(stat = 'identity')+ theme_minimal(base_family = 'AppleGothic') +
labs(title = 'Gender Frequency', subtitle = 'Sub Title', caption = 'copyright etc.')
ggplot(mm, aes(x= '성별', y='수')) +
geom_bar(stat = 'identity')+ theme_minimal(base_family = 'AppleGothic')
ggplot(mm, aes(x= '성별', y='수')) +
geom_bar(stat = 'identity')
welfare1$gender
#(4)성별 비율을 도표로 나타내고 그래프로 시각화한다
ggplot(welfare1, aes(x=gender, fill = gender))+
geom_bar(width = 0.2)+
scale_fill_manual(values = c('female'='red', 'male'='blue'))+
labs(x= '성별',
y= '명 수',
title= '성별 비율')
table(is.na(welfare$income))
table(is.na(welfare1$income))
qplot(welfare1$income, bins = 50) + xlim(0, 1000)
welfare1$income <- ifelse(welfare1$income %in% c(0, 9999), NA, welfare1$income)
table(is.na(welfare1$income))
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_point()
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_bar()
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_line()
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_line(group=1)
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_point()+
geom_line(group=1)
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_point(position = 'jitter')+
geom_line(group=1)
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x=gender, fill = gender, y=n))+
geom_violin()
#(2) ggplot2 그래프에서만 저장할 수 있는 방법.
ggplot(iris, aes(x= Petal.Width, y= Petal.Length, col=Species)) +
geom_point(aes(size= Petal.Width), pch = 3, alpha=0.5)
(welfare1$income, na.rm=T)
mean(welfare1$income, na.rm=T)
gapminder %>%
filter(gapminder$lifeExp > 70) %>%
group_by(continent) %>%
summarise(Frequency = n()) %>%
ggplot(aes(x= continent, fill= continent,  y=Frequency))+
geom_bar(stat = "identity")+
labs(x= '대륙',
y= '빈도',
title= '기대수명이 70을 초과하는 데이터 빈도(대륙별)')
source('C:/Users/V3RITaS/Desktop/WDS/src/7_R/21.02.16.원동선_사례연구소스.R', encoding = 'UTF-8', echo=TRUE)
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x = gender, fill = gender, y=n))+
geom_bar()
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x = gender, fill = gender, y=n))+
geom_bar(stat = "identity")
welfare1 %>%
filter(welfare1$income) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x = gender, fill = gender, y=n))+
geom_bar(stat = "identity")
View(welfare1)
??welfare1$income
??income
?income
?welfare1
#to.data.frame = T 을 안하면 리스트 형식으로 받아옴
#reencode = 'utf-8' 안하고 로드한뒤에 한글이 깨지면 기입.
View(raw_welfare)
welfare1 %>%
filter(!is.na(welfare1$income)) %>%
group_by(gender) %>%
summarise(n = n()) %>%
ggplot(aes(x = gender, fill = gender, y=n))+
geom_bar(stat = "identity")
ggplot(data=economics) +
geom_line(aes(x=date, y=psavert), col='#FF0000', size=2) +
geom_smooth(aes(x=date, y=psavert), col='pink') +
geom_line(aes(x=date, y=unemploy*0.001)) +
geom_smooth(aes(x=date, y=unemploy*0.001), col='dimgray') +
scale_y_continuous(sec.axis = sec_axis(~.*1000, name="unemploy"))
library(ggplot2)
ggplot(data=economics) +
geom_line(aes(x=date, y=psavert), col='#FF0000', size=2) +
geom_smooth(aes(x=date, y=psavert), col='pink') +
geom_line(aes(x=date, y=unemploy*0.001)) +
geom_smooth(aes(x=date, y=unemploy*0.001), col='dimgray') +
scale_y_continuous(sec.axis = sec_axis(~.*1000, name="unemploy"))
#4.1 열 합치기 (가로 합치기)
test1 <- data.frame(id=c(1,2,3,4,5),
midterm = c(70,80,90,95,99))
test2 <- data.frame(id=c(1,2,3,4,5),
final = c(90,80,70,60,99),
teacherid = c(1,1,2,2,3))
teacher <- data.frame(teacherid =c(1,2,3),
teachername = c('Kim','Park','Ryu'))
merge(test1, test2) # 중복된거 하나로 합쳐짐. 그래서 id 가 하나만 나옴.
cbind(test1, test2) #id 가 두개라 쓰기가 좀 그럼.
left_join(test1,test2, by='id') # merge 랑 같은걸로 알겠지만, 다르다.
#변수명 바꾸기 (cty -> city , hwy -> highway)
library(dplyr) #라이브러리 로드.
left_join(test1,test2, by='id') # merge 랑 같은걸로 알겠지만, 다르다.
merge(test1, test2) # 중복된거 하나로 합쳐짐. 그래서 id 가 하나만 나옴.
left_join(test2, teacher, by="teacherid")
merge(test2, teacher, by="teacherid")
library(rvest)
url <- 'https://movie.naver.com/movie/point/af/list.nhn'
text <- read_html(url, encoding = 'CP949') #특정 페이지의 전체.
text
#영화제목 - .movie
nodes <- html_nodes(text,'.movie') #nodes 를 해야 여러개 가져옴.
nodes
title <- html_text(nodes)
title
#평점 - .list_netizen_score em
nodes <- html_nodes(text, '.list_netizen_score em')
nodes
point <- html_text(nodes) #점수만.
point
#영화 리뷰 - .title
nodes <- html_nodes(text, '.title')
nodes
review <- html_text(nodes, trim = T)
review
review <- gsub('\t','', review)
review
review <- gsub('\n','', review)
review
review <- unlist(strsplit(review, '중[0-9]{1,2}'))[seq(2,20,2)] #리스트타입이라 unlist
review
review <- gsub('신고', '',review)
review
page <- cbind(title, movieInfo)
page
page <- cbind(page, point)
page
page <- cbind(page, review)
write.csv(page, 'outData/movie_review.csv', row.names = F) #행번호 삭제.
#여러 페이지 정적 웹크롤링.
home <- 'https://movie.naver.com/movie/point/af/list.nhn'
site <- 'https://movie.naver.com/movie/point/af/list.nhn?&page='
for(i in 1:100){   #i는 1~100까지.
url <- paste0(site, i);
#cat(url,'\n') 확인하고 싶을때.
text <- read_html(url, encoding = 'CP949')
#영화 제목
nodes <- html_nodes(text,'.movie')
title <- html_text(nodes)
#해당 영화 페이지.
movieInfo <- html_attr(nodes, 'href')
movieInfo <- paste0(url, movieInfo)
#평점 - .list_netizen_score em
nodes <- html_nodes(text, '.list_netizen_score em')
point <- html_text(nodes)
#영화 리뷰 - .title
nodes <- html_nodes(text, '.title')
review <- html_text(nodes, trim = T)
review <- gsub('\t','', review)
review <- gsub('\n','', review)
review <- unlist(strsplit(review, '중[0-9]{1,2}'))[seq(2,20,2)]
review <- gsub('신고', '',review)
page <- cbind(title, movieInfo)
page <- cbind(page, point)
page <- cbind(page, review)
movie.review <- rbind(movie.review, page)
} #1페이지당 10개의 리뷰라서 1000행 이 나옴.
for(i in 1:100){   #i는 1~100까지.
url <- paste0(site, i);
#cat(url,'\n') 확인하고 싶을때.
text <- read_html(url, encoding = 'CP949')
#영화 제목
nodes <- html_nodes(text,'.movie')
title <- html_text(nodes)
#해당 영화 페이지.
movieInfo <- html_attr(nodes, 'href')
movieInfo <- paste0(url, movieInfo)
#평점 - .list_netizen_score em
nodes <- html_nodes(text, '.list_netizen_score em')
point <- html_text(nodes)
#영화 리뷰 - .title
nodes <- html_nodes(text, '.title')
review <- html_text(nodes, trim = T)
review <- gsub('\t','', review)
review <- gsub('\n','', review)
review <- unlist(strsplit(review, '중[0-9]{1,2}'))[seq(2,20,2)]
review <- gsub('신고', '',review)
page <- cbind(title, movieInfo)
page <- cbind(page, point)
page <- cbind(page, review)
movie.review <- rbind(movie.review, page)
} #1페이지당 10개의 리뷰라서 1000행 이 나옴.
#상단의 for문이 잘 되었는지 확인.
View(movie.review)
write.csv(movie.review, 'outData/movie.review100page.csv')
class(movie.review) #데이터프레임 타입이 아니다.
#1~100까지 크롤링 한 영화들중 평점에 높은 10개를 시각화 하시오.
library(dplyr)
library(ggplot2)
library(KoNLP)
library(wordcloud)
library(stringr) #str_replace_all 사용하려면 로드.
file <- read.csv('outData/movie.review100page.csv', header =T, stringsAsFactors = F)
file$point <- as.numeric(file$point)
result <- file %>%
group_by(title) %>%
summarise(mean.point = mean(point),
sum.point = sum(point),
n = n()) %>%
arrange(desc(mean.point), desc(sum.point)) %>%
head(10)
result
ggplot(result, aes(x =sum.point, y=reorder(title, sum.point)), vjust=1)+
geom_col(aes(fill=title))+
labs(title = '평점이 높은 top10', x='평점 총점')+
geom_text(aes(label=paste('총점:',sum.point,'평균:',mean.point)), hjust=0)+
coord_cartesian(xlim= c(0, 120))+
theme(axis.title.y = element_blank(),
legend.position = 'none')
#영화 리뷰 내용만 뽑아 최빈 단어10개. 워드클라우드 시각화.
useNIADic()
file$review <- str_replace_all(file$review, '\\W', ' ')
file$review <- str_replace_all(file$review, '[ㄱ-ㅎ]', ' ')
file$review <- str_replace_all(file$review, '[ㅏ-ㅣ]',' ')
View(file)
nouns <- extractNoun(file$review)
str(nouns)
wordcount <- table(unlist(nouns))
str(wordcount)
df_word <- as.data.frame(wordcount, stringsAsFactors = F)
#df_word$word <- as.character(df_word$word)
df_word <- rename(df_word, word=Var1, freq=Freq)
df_word <- filter(df_word, nchar(word)>1)
df_word <- df_word %>%
filter(nchar(word)>1)
# 최빈 단어 top20 뽑고 그래프 그리기
top20 <- df_word[order(df_word$freq, decreasing = T),][1:20,]
top20
ggplot(top20, aes(x=freq, y=reorder(word, freq))) +
geom_col() +
geom_text(aes(label=freq), hjust=1, size=3, col='yellow')
set.seed(1234)
pal <- brewer.pal(8, 'Dark2')
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 200,
random.order = F,
rot.per = 0.1,
scale = c(4,0.3),
colors = pal)
#필요한 패키지 다운과 로드
install.packages("RSelenium")
library(httr)
library(rvest)
library(RSelenium)
# # # 셀레니움 동적 웹크롤링 준비 끝.# # #
remDr <- remoteDriver(port=4445L, #포트번호
browserName = 'chrome')#사용할 브라우저
remDr$open() # 실행시키고난 다음 나타난 웹브라우저를 끄면 안댐.
# 항상 실행할때마다 초기화 상태라 확장자 프로그램같은것들 초기화 된다.
# 차라리 셀레니움 서버를 통한 웹말고 옆에 일반적인 웹을 실행시키고 하는게 좋다.
remDr$navigate('https://www.youtube.com')
# # # 셀레니움 동적 웹크롤링 준비 끝.# # #
remDr <- remoteDriver(port=4445L, #포트번호
browserName = 'chrome')#사용할 브라우저
# # # 셀레니움 동적 웹크롤링 준비 끝.# # #
remDr <- remoteDriver(port=4445L, #포트번호
browserName = 'chrome')#사용할 브라우저
remDr$open() # 실행시키고난 다음 나타난 웹브라우저를 끄면 안댐.
# 항상 실행할때마다 초기화 상태라 확장자 프로그램같은것들 초기화 된다.
# 차라리 셀레니움 서버를 통한 웹말고 옆에 일반적인 웹을 실행시키고 하는게 좋다.
4remDr$navigate('https://www.youtube.com')
# 항상 실행할때마다 초기화 상태라 확장자 프로그램같은것들 초기화 된다.
# 차라리 셀레니움 서버를 통한 웹말고 옆에 일반적인 웹을 실행시키고 하는게 좋다.
remDr$navigate('https://www.youtube.com')
webElem <- remDr$findElement(using = 'css','#search')
webElem$sendKeysToElement(list('과학 다큐 비욘드', key='enter')) #특정 데이터를 검색하게.
html <- remDr$getPageSource()[[1]] #현재 페이지의 html 소스 가져오기.
html <- read_html(html)
html
#'#video-title' css 안의 text 가져오기
youtube_title <- html %>%
html_nodes('#video-title') %>%
html_text()
youtube_title[1:5] #제대로 들어갔는지 확인
youtube_title <- gsub('\n', '', youtube_title) # \n 을 빈칸으로.
youtube_title <- trimws(youtube_title) #앞뒤 스페이스 삭제
youtube_title # 확인.
youtube_title_url <- html %>%
html_nodes('#video-title') %>%
html_attr('href')
youtube_title_url[1:10]
youtube_title_url <- ifelse(is.na(youtube_title_url), '',
paste0('https://www.youtube.com', youtube_title_url))
#youtube_title 만 text파일로 out  /row.names=F : 행번호 x
write.table(youtube_title, file = 'outData/과학다큐결과.txt', sep=',',
row.names= F, quote= F)
result <- cbind(youtube_title, youtube_title_url)
write.csv(result, file = 'outData/과학다큐결과.csv', row.names=F) #row.names = F 행 번호 삭제.
#예제2. 마우스 스크롤 다운한 후 크롤링(덧글)
#cmd를 껐을때. 셀레니움 폴더를 가서 cmd구동.
# 그후 java -Dwebdriver.gecko.driver="geckodriver.exe" -jar selenium-server-standalone-3.141.59.jar -port 4445 입력.
#그 다음 아래의 코드를 실행.
remD <- remoteDriver(port=4445L, #포트번호
browserName = 'chrome')#사용할 브라우저
remD$open() # 서버를 통해 브라우저 open.
remD$navigate('https://youtu.be/tZooW6PritE') #특정 웹사이트 접속.
btn <- remD$findElement(using='css selector',
value = '.html5-main-video') #동영상 을 멈추기위한 사전 작업.
btn$clickElement() #메인 동영상 플레이 멈춤.
#마우스 스크롤 다운.
remD$executeScript('window.scrollTo(0,500)') #x는 좌우, y는 상하.로 스크롤이 움직인다.
remD$executeScript('window.scrollTo(0,1000)')
remD$executeScript('window.scrollTo(0,2000)')
remD$executeScript('window.scrollTo(1000,3000)')
remD$executeScript('window.scrollTo(1000,5000)')
# 현재 페이지의 html소스 가져오기.
html <- remD$getPageSource()[[1]]
html <- read_html(html)
comments <- html %>%
html_nodes('#content-text') %>%
html_text()
comments[1:10] # 확인.
# 현재 페이지의 html소스 가져오기.
html <- remD$getPageSource()[[1]]
html <- read_html(html)
comments <- html %>%
html_nodes('#content-text') %>%
html_text()
comments[1:10] # 확인.
write.table(comments,file = 'outData/댓글.txt',
sep=',' , quote=F)  #row.names=F)
?write.table
#1.미국 주별 강력 범죄율 시각화.(datasets::USArrests 이용.)
View(datasets::USArrests) # 행 이름이 미국의 주 이름으로 되어있다.
View(iris) # 행 이름은 번호로 되어있음.
#(1) 패키지 준비.
install.packages("ggiraphExtra") # 지도시각화를 위한 패키지.
library(ggiraphExtra)
install.packages("mapproj") #ggChoropleth 함수 사용을 위한 패키지지
install.packages("maps") # map_data함수를 통해 지도 정보 이용
library(ggplot2)
library(tibble) # 행이름(지역명)을 변수로 하기위한 작업.
#(2) 행이름을 변수로
head(USArrests,1)
crime <- rownames_to_column(USArrests, var='state')
class(crime)
head(crime,3)
crime$state <- tolower(crime$state) #주 명을 모두 소문자로 .
head(crime,5)
#(3) 미국지도 주 정보 가져오기
View(map_data('state'))
state_map <- map_data('state')
#(4) 지도 시각화
ggChoropleth(data=crime, #지도에 표현할 데이터
aes(fill = Murder, #지도에 채워질 변수
map_id=state), #지역변수
map=state_map, #위도 경도 지도 데이터
interactive = T ) # 인터렉티브 속성 지도에 마우스를 가져다대면 특정위치의 정보가 보인다.
#rm(list = ls())
install.packages("stringi")
install.packages("stringi")
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
head(korpop1)
str(changeCode(korpop1)) #UTF-8로 인코딩된 데이터를 CP949로 변환후 출력
library(dplyr)
korpop1 <- rename(korpop1, pop= 총인구_명,
name = 행정구역별_읍면동)
head(korpop1)
library(devtools)
head(korpop1)
library(devtools)
devtools::install_github("cardiomoon/kormaps2014")
rm(list = ls())
install.packages("stringi")
install.packages("stringi")
install.packages("devtools")
library(devtools)
devtools::install_github("cardiomoon/kormaps2014")
#(1) 패키지 준비.
install.packages("ggiraphExtra") # 지도시각화를 위한 패키지.
install.packages("ggiraphExtra")
library(ggiraphExtra)
install.packages("mapproj") #ggChoropleth 함수 사용을 위한 패키지지
install.packages("maps") # map_data함수를 통해 지도 정보 이용
library(maps)
library(ggplot2)
library(tibble) # 행이름(지역명)을 변수로 하기위한 작업.
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
head(korpop1)
str(changeCode(korpop1)) #UTF-8로 인코딩된 데이터를 CP949로 변환후 출력
library(dplyr)
korpop1 <- rename(korpop1, pop= 총인구_명,
name = 행정구역별_읍면동)
str(changeCode(korpop1))
head(kormap1) # name 의 한글이 깨짐. utf-8로 되어있음
head((changeCode(kormap1))) #name1 의 한글이 깨짐. CP949로 되어있음
head(changeCode(korpop1[,c('name','pop','code')]))
ggiraphExtra::ggChoropleth(data=korpop1,
aes(fill = pop, map_id=code, tooltip=name),
map=kormap1,interactive = T)
#korpop1$name => UTF-8을 CP949로 변환
korpop1$name <- iconv(korpop1$name, 'UTF-8','CP949')
#결핵환자수 지도 시각화
head(tbc)
head(changeCode(tbc))
tbc$name1 <- iconv(tbc$name1, 'UTF-8', 'CP949') #한글 깨지는거 복구.
tbc$name <- iconv(tbc$name, 'UTF-8','CP949')
head(tbc) #확인.
ggChoropleth(data = tbc, aes(fill = NewPts, map_id=code, tooltip=name1), #tooltip=name1 은 강원, tooltip=name 은 강원도로.
map=kormap1, interactive = T)
