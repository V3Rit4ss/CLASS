1. Ajax : 서버와 데이터 교환을 하는 기술.
http://api.jquery.com/category/ajax/ ajax관련된 API 정보
웹페이지의 특정부분(한파트)를 업데이트하고 서버와 데이터를 교환하는 기술.
우리가 기존의 웹페이지의 내용을 변경하기 위해서는 웹페이지에 떠있는 페이지를 다시 로딩해야 했었다.
그런데 Ajax를 이용하게 되면 특정부분의 영역에 있는 데이터 수정시 전체 페이지를 로딩하지 않고 서버와 데이터 교환이 가능하다
샘플을 보면 기존에 있었던 텍스트 대신 바꿔 치기 한다.
전체가 로딩되지 않고 일부분만 텍스트가 변경되었다.
Ajax는 웹페이지의 전체내용을 다시 불러들이지 않고 웹페이지의 일부분을 배경에서 서버와 데이터 교환이 일어나 원하는 부분에 뿌려 줄 수 있는 기술이다.

jQuery에서는 Ajax와 관련하여 몇 개의 메소드를 제공하고 있다.
jQuery Ajax메소드를 사용하게 되면 외부데이터를 로딩해서 보여질 수 있다.
jQuery를 이용하지 않으면 Ajax이용이 어려울 수 있으나 jQuery를 이용하면 쉬운 코딩이 될 수 있다.

2. jQuery load() 메소드
$(selector).load(URL, data, callback함수);

ex> load 함수이용과 error 처리.
    <title></title>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        $(document).ready(function () {
            $('button').click(function () { //기존화면 그대로 두고 일부만 변경.
                $('#div1').load('demo_test1.txt #p1', function (responseTxt, statusTxt, xhr) {  //html 파일 이름에 + 들어가면 x !!
                    // responseTxt : 요청성공시 가져올 데이터 
                    // statusTxt: 요청상태(success, error, timeout, ... )
                    // xhr :XMLHttpRequest 객체 에러내용을 가지고있다.
                    if (statusTxt == 'success') {
                        alert('성공');
                    } else {
                        alert('load 실패' + statusTxt + xhr.status + xhr.statusText);
                        //xhr.status : 404 없는 파일.
                        //xhr.statusText : 에러타입.
                    }

                });  //특정부분을 출력하고싶으면 id,class 가 필요
            });

        });
    </script>
</head>
<body>
    <div id="div1">
        <h2>Ajax 첫 예제</h2>
    </div>
    <!-- <button onclick="location.href='xx.html'">외부파일 가져오기.</button>  전체 변경할때.  -->
    <button>외부파일 가져오기.</button>
</body>


* 옵션으로 주어지는 콜백함수는 로드메소드가 완전히 실행된 후 실행되는 함수.서로 다른 파라미터를 갖는다.
responseTxt : 요청/응답 성공시 결과 내용 포함
statusTxt : 요청상태포함(success, notmodified, error, timeout, parsererror)
xhr : XMLHttpRequest객체 포함


2. Http Request : GET vs. POST
$.get(URL, callback);
$.post(URL, {파라미터이름:전달파라미터값, callback);
$.ajax({/*	$.ajax(json형식으로 option 설정)
	ex) $.ajax({url:'', type:'get', data:~ , success:function(data,status){} });

1. url : 요청 자원(서버)를 호출, 일반적으로 호출된 자원에서 json형식으로 데이터 return 해준다
2. type : 요청처리방식
3. data: 요청시, 함께 전달되는 데이터 
ex. $(‘form’).serialize()
	form안에 있는 데이터를 query로 변경하여 전달

4. dataType : 요청 후, 응답의 결과로 반환되는 데이터의 종류를 선언
ex. Xml, html, joson, text

5. success : 성공했을 때, 처리할 내용, 콜백함수로 나타냄.
ex. Function(data, status){}

6. error : 응답이 에러가 났을 때, 에러 상태에 대한 코드를 반환
ex. error :  function(code){
   code:에러에 대한 code 내용 전달...
}
  })


- get 함수이용 ex>
    <title></title>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        $(function () {
            $('button').click(function () {
                var mId = $('#mId').val();
                //$.get('url' , '콜백함수');  'idConfirm.jsp?mId='+mId, 콜백함수
                $.get('idConfirm.html?mId=' + mId, function (data, status) {
                    //data : 요청 페이지 결과 데이터.
                    //status : 요청 상태.(success, error, timeout, ... )
                    if (status == 'success') {
                        $('#result').html(data);
                    } else {
                        alert('요청 실패');
                    }
                });
            });
   /*         $('#mId').keyup(function () { // 키보드를 하나하나 칠때마다 중복확인을 바로 해주는.
                var mId = $('#mId').val();
                //$.get('url' , '콜백함수');  'idConfirm.jsp?mId='+mId, 콜백함수
                $.get('idConfirm.html?mId=' + mId, function (data, status) {
                    //data : 요청 페이지 결과 데이터.
                    //status : 요청 상태.(success, error, timeout, ... )
                    if (status == 'success') {
                        $('#result').html(data);
                    } else {
                        alert('요청 실패');
                    }
                });   DB와 연동해서 할때.
            });  */
        });
    </script>
</head>
<body>
    <p>
        아이디<input type="text" name="mId" id="mId" />   <!-- I => i .대문자임-->
        <button>중복 확인</button>
    </p>
    <span id="result" ></span>
</body>

- post 함수 이용.ex>

    <title></title>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        $(function () { //post 사용방식. jsp 파일이 없기에 작동이 불가함.
            $('button').click(function () {
                // $.post( 'idConfirm [파일이름만 적어준다.]' , '전달될 파라미터들을 객체로.' , '콜백함수' );
                var mId = $('#mId').val();  //{ mId(속성):mId(속성값) }
                $.post('idConfirm.html', { mId: id }, function (data, status) {
                    if (status == 'success') {
                        $('#result').html(data);
                    } else {
                        alert('실패');
                    }
                }); // post 함수
            }); // click 콜백함수
        }); //jQuery 부분
    </script>
</head>
<body>
    <p>
        아이디<input type="text" name="mId" id="mId" />   <!-- I => i .대문자임-->
        <button>중복 확인</button>
    </p>
    <span id="result"></span>
</body>

3. Http Request : ajax

    <title></title>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        $(function () {
            $('button').click(function () {
                $.ajax({ //객체는  단 하나만 들어감.
                    //url : 요청경로.
                    // type : get/post  = 디폴트값이 get. (안쓰면.)
                    // data : 요청 파라미터 값.
                    // dataType : 요청 결과의 타입 (html, json, ... ) 디폴트값은 html 로 댐.
                    //success : 요청성공시 수행할 콜백함수.
                    // error : 요청실패시 수행할 콜백 함수.
                    url: 'idConfirm.html',  //내 파일을 적어도, 웹사이트 경로를 적어도 가능.
                    type: 'get',
                    data: 'mId=' + mId,
                    dataType: 'html',
                    success: function (data) {
                        $('#result').html(data);
                    }, error: function () {
                        alert(code.status + code.statusText);
                    }
                }); 
            }); // click 콜백함수
        }); //jQuery 부분
    </script>
</head>
<body>
    <p>
        아이디<input type="text" name="mId" id="mId" />   <!-- I => i .대문자임    id="mId" : "mId" -> 파라미터.   -->
        <button>중복 확인</button>
    </p>
    <span id="result"></span>
</body>


4.json
(1) json데이터
자바 스크립트에서 객체에 대한 선언(언급)
-var person = {}
-person.name = “홍길동”; //속성, 값
-person.age = 25;
객체 선언과 속성/속성값 할당
-var product = {pname:”사과”, price:1500 };
-json 데이터를 문자열로 전송한다
-var sendJsonText =”{\“pname\”: \”사과\”, \”price\”: \”1500\”}”;
-var jsonObj = $.parseJSON(sendJsonText);

(2) json List 가져오기
var obj = { }; // 초기화
var objArray = [ ]; //초기화
객체에 속성값을 할당
(ex) var bplayer1 = {rank:1, name:”피어밴드”, defpt:0.36 };
var bplayer2 = {rank:2, name:”장현식”, defpt:0.56 };
배열 객체에 index, push()를 활용해서 추가를 한다
(ex) var pitList = [];
pitList[0] = bplayer1; // 배열에 단위객체 추가
pitList.push(bplayer2);
배열 객체에 단위를 한번에 할당
(ex) var pitList = [{rank:1, name:”피어밴드”, defpt:0.36 },
{ rank:2, name:”장현식”, defpt:0.56 }];
(3) json으로 배열 안에 배열 만들기
학생 list, 그 학생의 친구 정보
- var studentList = [ {name:”김길동”,
friendList:[{ name:”이희영” }, { name:”김정아” }] } ,
{name:”김길동”,
friendList:[{ name:”이희영” }, { name:”김정아” }] }];
json Valid 체크하는 사이트에서 체크할 필요도 있다.


- Ajax 함수를 이용, json 파일 읽고 출력하기.

    <title></title>
    <style>
        td{
            padding: 10px; border-top:1px solid red;
        }
        tr:last-child td {
            border-bottom:1px solid red;
        }
    </style>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        $(document).ready(function () {
            $.ajax({
                //url : json 파일 경로, 웹경로 , 사용자PC의 파일 경로
                //dataType : 'json'
                //success : 요청성공시 수행할 콜백함수.
                url : 'ex.json',
                dataType : 'json',
                success : function (data) {
                    //data = [{id:1, name:'자두', ... ~~ }] 객체 배열로 되어서 for문 3가지 다 사용 가능.
                    out = '<tr><th>ID</th><th>이름</th><th>가격</th><th>설명</th></tr>';
                    $.each(data, function (idx, item) { //idx 꼭 있어야함.
                        out += '<tr><td>' + item.id + '</td><td>' + item.name + '</td><td>' + item.price + '</td><td>'+item.description+'</td></tr>';
                    }); //each()함수 끝.
                    $('#dataShow').html(out);
                } // success 콜백함수 끝.

            }); // ajax 함수 끝.
        }); // jQuery 끝.
    </script>
</head>
<body>
    
    <table id="dataShow"></table>
</body>

