자료형과 연산자.

1. 변수
- 프로그램이 실행되는 동안 상황에 따라 변하는 값을 저장
- 코드 내에서 매번 값을 지정해 주면 코드를 작성하거나 수정하기 어려움
- 변수는 코드 내에서 자료를 일관성 있게 사용하고 관리하기 위해서
  이름(identifier)을 부여해 다른 변수 또는 자료와 구분해서 사용할수 있도록 함.
- 이름을 부여하고 값을 저장해 놓으면 연산에 변수 이름을 사용할 수 있음

* 변수 선언(Declaration)
- 값을 저장할 수 있는 변수를 만드는 것
- 변수 선언을 위해서는 변수에 어떤 종류의 값이 저장되어야 하는지 알리기 위한 타입이 있어야 함
-  파이썬은 변수를 선언하기 위한 타입이 없으므로 변수 선언 과정이 없음

* 변수 할당(Assignment)
- 어떤 값이 이름을 갖도록 하는 과정, 할당은 변수에 값을 저장하는 것을 의미
- 파이썬에서 변수에 값을 저장하기 위해서는 할당 연산자를 사용한다.  ->  ' = ' 연산자를 이용 , 많이 사용하기도 한다. 
- 변수의_이름 = 연산_결과_값  
<ex> a = 10
      print(a)  -> 자바에서 콘솔값에 출력하듯이 출력이 된다.

1.2 변수 이름 규칙
- 변수의 이름은 문자, 숫자, 밑줄(_(underscore))문자를 포함
- 변수는 숫자로 시작할 수 없음
- 변수에 사용하는 문자는 대소문자를 구분
- 공백, 문장부호, 특수문자(밑줄 문자만 유일하게 가능) 등은 사용 불가
- 파이썬의 예약어(예: class, def)는 사용할 수 없음
- 사용 중인 내장 함수나 모듈 이름(예: id, list, print)등은 사용 지양

1.3 id( )
- 변수는 파이썬에서 가장 많이 사용되는 객체
- id( ) 는 객체의 주소 값을 출력.
ex> 
x = 100
print(id(x)) -> 해당 객체의 주소값 출력.

1.4 변수 삭제
- del 변수
- del 은 현재 커널의 변수를 삭제.
- 여러개 변수를 동시에 삭제 하려면 변수목록을 ' , '(콤마)로 구분해 나열.
- whos 명령을 이용하면 현재커널에 정의 되어 있는 변수 목록을 확인.
ex> del a,b 

1.5 다중 변수 선언.
- 한마디로 한 라인에 여러개 변수를 선언해서 사용가능하다.
ex>
a, b = 10, 20
print(a+b)
-> 30.
* 변수에 값의 할당 작업은 순차적으로 발생하는 것은 아니다.
ex>
a ,b = 10, 20
a, b = b a+b
a, b
-> (20, 30)

a, b = 10 ,20
a = b
b = a+b
a, b
-> (20, 40)


1.6 소스코드 인코딩
- 파이썬 소스 파일은 utf-8로 인코딩되어 처리됨
- 세계 대부분의 언어 문자를 문자열 리터럴(literal), 식별자(identifier) 및 주석(comment)에서 동시에 사용할 수 있음
- 한글을 처리하기 위해 utf-8을 사용하므로 별도로 인코딩을 지정하지 않아도 됨
- 인코딩을 지정하려면 다음 형식으로 파이썬 파일의 맨 위에 입력
 => # -*- coding: utf-8 -*-

1.7 도움말
 help([x])
x : 도움말을 얻을 함수 이름입니다. 대괄호([ ])는 선택사항을 의미
ex> help(print) => print 함수에 대한 도움말을 볼수 있다.


2. 사용자 입력.
- 변수이름 = input("입력할 설명글")
- 사용자로부터 값을 입력 받기 위한 함수 
- 입력한 값은 항상 문자열 임

2-1. 화면 출력.
print( x )

2-2. 화면 출력(sep ='')
 print('message', sep=' ', end='\n', file=sys.stdout

2-3. 화면 출력(end 속성)
print('message', sep=' ', end='\n', file=sys.stdout


3. 기본자료형
자료형(데이터 타입, data type)
- 프로그래밍 언어들은 변수가 가져야 할 값의 크기, 형식, 범위 등에 따라서
  값의 유형을 정해 놓고 사용
- 프로그래밍 언어에서 정수, 실수, 논리 등 여러 종류의 자료(데이터)가 어떤 값을 가질 수 있는지에 대해 알려주는 속성
-  변수에 저장할 수 있는 값의 범위(또는 크기)와 값을 저장하는 방식이 달라짐
- 해당 자료형을 이용해서 수행할 수 있는 명령들이 달라질 수 있음

자료형을 지정하는 키워드
- 정수(integer)를 지정하는 키워드는 int
- 부동소수점(실수, floating-point)를 지정하는 float 또는 double
- 논리(boolean)을 지정하는 boolean
- 문자 한 개(character)를 지정하는 char
- 문자와 숫자로 이루어진 문자열(string)을 지정하는 string

파이썬은 자료형의 개념이 있지만 변수를 선언할 때 자료형을 지정하지 않음

3-1. 숫자형
정수(int) : 숫자의 크기가 얼마가 되던지 모든 정수는 int 자료형으로 처리

실수(float) :
부동소수점
float 형으로 처리
정수형과 정수형의 나눗셈 연산은 실수형(float)

복소수(complex) 형 :
복소수(complex number)는 실수(real number)와 허수(imaginary number)의 합으로 나타내는 수 체계
허수는 j문자를 붙여 표현


소수점이 없는 정수는 int 형
 - 파이썬 3.x 버전에서는 2.x 버전에 있었던 long 형이 없어지고 모든 정수를 int형으로 인식

소수점이 있는 숫자는 float 형
 - 허수부를 포함하는 복소수는 complex 형
 - 허수부를 표현하는 문자는 i가 아니고 j

1)문자형의 표현
단일문자와 문자열을 구분하지 않음
겹따옴표("와 ") 또는 홑따옴표('와 ') 로 묶어서 사용

2) 여러 줄 문자 표현
여러 줄 문자열은 겹따옴표 3개("""와 """) 또는 홑따옴표 3개('''와 ''')를 사용

3)소스코드 줄 바꿈
 라인의 맨 마지막에 있는 역슬래시(\ 또는 \)는 소스코드 줄 바꿈
ex> text = '''\
      가나다라
      마바사아자
      차카타파하\
      '''

4)탈출 문자
문자열 내에서 특별한 의미를 갖는 문자들은 역슬래시(\)를 이용하여
이스케이프(escape) 문자를 사용
\n : 줄바꿈
\t : 탭
\r : 리턴 (행의 첫 번째 열로 돌아옴)
\0 : Null
\\ : \ 문자 표시
\' : '(홑따옴표) 문자 표시
\" : "(겹따옴표) 문자 표시

5)문자열 연결하기
문자열과 문자열을 +(덧셈)하면 문자열을 연결
문자열을 공백으로 연결해도 문자열을 연결
문자열과 숫자를 *(곱셈) 연산 하면 문자열을 곱셈함 숫자만큼 반복

6) 문자열 인덱싱
문자열[index] 형식으로 문자열에서 지정한 위치(index)의 문자를 뽑아낼 수 있음
첫 문자의 인덱스가 0
음수는 맨 뒤의 문자부터 의미

7)문자열 슬라이싱
[start:stop]를 이용하면 부분 문자열을 빼 낼 수 있음
 - start 위치의 문자는 포함하지만 stop 위치의 문자는 포함하지 않음
 - [:]형식에서도 인덱스를 음수로 지정할 수 있음

[start:stop:step] 형식은 매 step번째 아이템을 추출해 줌
 - start, stop, step 은 생략될 수 있음
 - 만일 start와 stop이 생략되면 [::step] 형식이 됨
 - 이 형식은 문자열 뿐만 아니라 리스트, 튜플 등에서도 사용할 수 있음

8) raw 문자열
- 문자열 앞에 r을 붙여 raw 문자열을 선언해 사용
- r을 붙이면 역슬래시 문자를 해석하지 않고 남겨둠
- 탈출 문자를 사용하지 않고 역슬래시 등의 문자를 그대로 표현
- 정규표현식(Regular Expression)또는 디렉토리 경로 표현에 사용

9)유니코드
- 파이썬 3.x부터는 모든 문자를 유니코드로 처리하기 때문에 별도로 u 문자를 문자열 앞에 붙일 필요 없음
- 유니코드를 여러분이 원하는 인코딩으로 변경하길 원한다면 encode()함수를 사용할 수 있음

3-2 논리형
논리형(Bool)은 True 또는 False 값
true 또는 TRUE를 논리형 값으로 사용할 수 없음
다음은 False로 판단되는 값들
 - None
 - False
 - 숫자 타입 0에 해당하는 것(예: 0, 0L, 0.0, 0j)
 - 빈 문자(예: ‘’, “”)
 - 빈 튜플 또는 리스트(예:, (), [])
 - 빈 딕셔너리(예: {})

True로 판별되는 경우는 False로 판별되는 경우를 제외하고 모든 경우

- False 로 간주되는 것 : 0, None, ""[], (), {}
- ' ' : 스페이스가 들어간것은 True 로 간주.
- 널문자('\0')은 True

1) 자료형 확인 - type( )
= int 인지 , float , str , ... 등등을 알려준다.

2) 자료형 변환 = ( ) 안에 값을 int형, float 형 ,str형 등등으로 변환한다.
int( ), float( ), str( ), bool( ), isinstance(변수명,타입명)
ex> int(3.14) 
-> 3
float(100)
-> 100.0

4. 포맷팅
- 문자, 숫자, 날짜 데이터에 형식을 지정하는 것
- 이전 스타일 포맷팅
  '%s %s' % ('one','two')
# 이전 스타일
# java = %s : 문자열 , %c : 문자, %d : 정수, %f 실수 , 
# %x : 16진수(cc :11001100), %o : 8진수, %% 문자% 사용가능.

- 새로운 스타일 포맷팅
  '{} {}'.format('one','two')
결과
  one two


4-1. format( ) 함수 문법
- 인덱스 : 출력할 인수의 인덱스(순서)
- 정렬방법 : < (기호) : 왼쪽정렬,  >(기호) : 오른쪽정렬, ^ (기호) : 가운데 정렬
- 자릿수 : 출력할 자릿수 지정. 변수보다 적은 자릿수가 지정될 경우, 무시되고 변수가 다 출력.
- 타입 : d : 10진수 , f : 실수 , s : 문자 , b : 2진수, o : 8진수, x : 16진수

+) 순서 지정
"{1}님의 나이는 {0}살 입니다.".format(age, name)
#{} 안에 0번(인데스) 부터 넣을수 있는데 순서를 바꿔서 해도 가능


4-2. 숫자 출력 + 문자열 출력.
# 자릿수 지정
# 숫자의 경우 , 출력할 변수보다 큰 자릿수를 지정하면 오른쪽 정렬(기본값.)
# 문자의 경우, 출력할 변수보다 큰 지릿수를 지정하면 왼쪽 정렬(기본값.)

#변수보다 작은 자릿수를 지정하면 자리수 지정이 무시되고 다 출력.
a = 12345
s = "Hello"
print("출력 : [{}], [{}], [{}]".format(a,a,a))
print("출력 : [{0}], [{0}], [{0}]".format(a,a,a))
print("출력 : [{}], [{:10}], [{:3}]".format(a,a,a)) #같은 인덱스라 0 생략 가능. 

*문자열의 포맷 코드는 s
 - {:width.preision} 형식 : {전체자릿수.출력할문자열의개수}
print("출력 : [{}], [{:10}], [{:3}]".format(s,s,s)) #같은 인덱스라 생략 가능.

결과 = 
출력 : [12345], [12345], [12345]
출력 : [12345], [12345], [12345]
출력 : [12345], [     12345], [12345]
출력 : [Hello], [Hello     ], [Hello]

4-3. 정렬 방법 지정
{ }의 콜론(:)뒤에 ‘<’, ‘>’, ‘^’을 이용하면 정렬 상태를 지정
‘<’는 왼쪽정렬, ‘>’는 오른쪽 정렬, ‘^’는 왼쪽 정렬
'{[인덱스]:[공백대체문자][정렬방법][자릿수][타입]}'.format(변수명) 이렇게 다 쓸 경우 순서를 지켜야함.
ex>
a, b, c = 10, 20, 3
print("출력 : [{:>6d}], [{:<6d}], [{:^6d}]".format(a,b,c))
결과 = 출력 : [    10], [20    ], [  3   ]

4-4. 공백 대체 문자
인덱스 : 공백대체문자 정렬방법 자릿수 타입
ex>
a = 10
s = "Hello"
print("출력 : [{0:$>10}], [{1:*<20}], [{1:_<10.3}]".format(a,s))
 [{1:_<10.3}] 전체 10자리 확보, 변수는 3자리만 출력, 공백은 _ 로 대체.
결과 = 출력 : [$$$$$$$$10], [Hello***************], [Hel_______]
# 주의점 : 공백대체문자를 지정할때는 반드시 정렬방법, 자릿수를 표현해야 한다.
print("{0:$10} / {1:*20}".format(a,s)) #오류가 나는 상황.

4-5. 매개변수를 갖는 포맷
- { }안에 { }를 이용하면 format() 함수의 인수를 이용해 포맷 형식 지정
- format 함수의 인수에 이름을 지정할 수 있음
  이 경우 이름을 갖는 인수(키워드 인수)는 함수 인수 목록에서 이름이 없는 인수(위치 인수) 뒤에 와야 함

4-6.  날짜 출력
from datetime import datetime
print('{:%Y=%m-%d %H:%M}'.format(datetime(2001, 2, 3, 4, 5)))

%Y는 연도(Year), %m은 월(Month), %d는 일(Day)
%H는 시간(Hour), %M(Minute)은 분, %S는 초(Second)를 의미
결과 2001-02-03 04:05


5.1. 산술 연산자
- 덧셈, 뺄셈, 곱셈, 나눗셈은 수학에서의 연산과 동일
- 나머지 연산자는 피젯수를 젯수로 나눈 나머지 값을 구하는 연산
- 나머지 연산의 실제 계산은 피젯수에서 젯수를 계속 빼서,
  피젯수의 값이 젯수의 값보다 작아질 때의 피젯수의 값이 최종적으로 나머지 연산의 값이 됨
다른 연산자 들은 같고 밑의 것은 알아두자.
//  : 몫
** 제곱

5.2 대입 연산자
- 대입연산자 =은 변수에 값을 저장하기 위한 연산자
- 할당연산자라고 부르기도 함
- = 기호의 오른쪽은 값이 오거나 계산되어서 값으로 출력될 수 있는 표현식 또는 함수 호출 구문이 올 수 있음
- 복합대입연산자
  연산자와 대입연산자를 함께 사용한 연산자
  +=, -=, *=, **=, /=, //=, %= 등

5.3. 논리 연산자
- & 와 and 연산자는 양쪽 항의 값이 모두 True 인 경우에만 True를 반환
- | 와 or 연산자는 양쪽 항 중에서 어느 한쪽만 True 이면 True를 반환
- ‘and’ 연산자는 False로 판별되는 첫 번째 항의 결과가 반환
- ‘or’ 연산자는 True로 판별되는 첫 번째 항의 결과가 반환
- 논리 반전은 not 연산자를 사용
   not => NOT
   자바 또는 C 언어에서 사용하는 ! 부호를 논리 반전(not) 연산자로 사용 못함

5.4. 비교 연산자 (java 에서 쓰던것처럼 하면 된다.)
- 크기를 비교해 결과를 True 또는 False로 반환
- 문자열 타입도 가능합니다. 소문자가 대문자보다 큰 값
- 논리 타입도 크기 비교가 가능합니다. True가 False 보다 큼


5.5. 비트 연산
- 숫자를 2진수로 변환하여 연산

연산자    설명
a & b 	AND 연산, 두 비트가 모드 1이면 1
a | b 	OR 연산, 두 비트중 하나 이상 1이면 1
a ^ b 	XOR 연산, 두 비트가 같으면 0, 다르면 1
~ a 	NOT 연산, 0을 1로, 1을 0으로 변환
a >> n   Shift 연산, a를 n비트만큼 오른쪽으로 이동, 으로 나눈 결과와 같음
a << n   Shift 연산, a를 n비트만큼 왼쪽으로 이동, 을 곱한 결과와 같음

6.1. 문자열 다루기

방법 설명
“ ” 또는 ‘ ’		문자열을 만듭니다.
+ 			문자열을 연결합니다.
len(“문자열”) 		문자열의 길이를 반환합니다.
[start : stop] 		문자열을 start 위치부터 stop 위치까지 자릅니다. stop은 포함 안 됩니다.
[start : stop : step] 	문자열을 start 위치부터 stop 위치까지 매 step 마다 반환합니다. stop은 포함 안 됩니다.
split(‘delimiter’) 		문자열을 delimiter로 잘라 리스트로 반환합니다.
‘delimiter’.join([“str1”, ...]) 	문자열 리스트를 delimiter로 연결합니다.
capitalize( ) 		첫 문자를 대문자로, 나머지 문자를 소문자로 바꿔줍니다.
upper( ), lower( ) 		문자열을 모두 대문자(upper) 또는 소문자(lower)로 바꿉니다.
startswith( ), endswith( ) 	특정 문자로 시작하는지와 끝나는지를 식별해서 논리(True/False)값을 반환합니다.
find( ), index( ) 		특정 문자의 인덱스를 반환합니다.

isalnum( ), isalpha( ),
 isnumeric( ),isdecimal( )  	이 문자열이 숫자인지, 문자인지 판별해 줍니다.

replace(old, new) 		old 문자를 new 문자로 치환합니다.

7. 날짜 및 시간

datetime.date(year, month, day)
datetime.time(hour, minute, second, microsecond, tzinfo)
datetime.datetime(year, month, day, hour, minute, second)

- year, month, day, hour, minute, second, microsecond : 년, 월, 일, 시(0 <= hour < 24), 분(0 <= minute < 60), 초(0 <= second < 60),
microsecond(0 <= microsecond < 1000000) 를 의미.
- tzinfo : tzinfo 추상 클래스를 상속받아 구현한 타임존 객체를 저장.