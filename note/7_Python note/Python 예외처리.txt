Python 예외처리.

1. 예외 처리.
- 예외(Exception) : 실행 중에 발견 된 오류
- 예외 처리(Exception Handling) : 오류 발생에 대한 대처 방법 중 하나
- 예외 처리는 시스템 스스로 오류를 복구 하는 것이 아니고
  오류발생 가능성이 있는 부분에 대한 처리를 미리 프로그래밍 하는 것

*  다음과 같은 상황들은 예외 처리를 해야 할 필요가 있음
- 파일이 없거나 쓰기 금지로 인한 오류
- 데이터베이스 프로그래밍 시 제약조건 등에 의한 데이터베이스 서버 오류
- 네트워크 프로그래밍 시 네트워크 연결 실패로 인한 오류
- 리스트 또는 튜플의 인덱스를 벗어난 참조로 인한 오류

ex>
#  파일이름을 잘못쳤을때.
filename = input("읽을 파일 이름은?")
f = open('data/'+filename, 'r')
firstline = f.readline()
print(firstline)
f.close()

FileNotFoundError: [Errno 2] No such file or directory: 'data/ch08.data.txt'  => 파일을 다룰때 파일이 없거나 쓰기 오류.
(오류 메세지는 매우 많다.)

2. try ~ except
- try는 예외를 처리할 때 예외가 발생할 가능성이 있는 문장을 작성
  try 절(또는 블록)에서 예외가 발생하면 except 절을 찾음
- except 절은 예외가 발생했을 경우 실행되어야 할 코드를 작성

ex>
try:
    x = int(input("점수는 ?"))
    print("입력한 점수는 {}입니다".format(x))
except Exception : # <= (최상위 클래스)  또는 ValueError
    print("점수를 입력 안 하셨습니다.")

- 유효한 정수가 입력되면 try 블록의 나머지 문장을 실행
- 입력한 값이 정수가 아니면 정수형으로 변환하는 도중 예외가 발생
  try 블록에서 예외가 발생하면 해당 예외를 처리할 수 있는 except 블록으로 제어가 이동

ex>
while True:
    try:
        x = int(input("정수는 ? "))
        print("입력한 정수는 {}입니다.".format(x))
        break;
    except ValueError :
        print("유효한 정수를 다시 입력하세요")

+) 예외를 지정한 처리
- except 절은 예외 이름을 생략 할 수 있음
   프로그래밍 오류를 쉽게 처리 할 수 있지만 실제로 어떤 오류를 처리하는지는 알수 없음
   가능하다면 except 절에 예외를 지정해서 사용하는 것이 좋음
- try 절의 실행 중에 예외가 발생하면 예외가 발생한 이후의 문장들이 실행되지 않음
- 발생한 예외의 유형이 except 키워드 다음에 명명 된 예외와 일치하면 해당 except 절이 실행
- 예외를 처리할 except 절이 발견 되지 않으면 처리되지 않은 예외 이며 프로그램 실행은 중지됨

ex>
while True:
    try:
        x = int(input("정수는 ? "))
        print("입력한 정수는 {}입니다.".format(x))
        result = 100 / x
        print("100 / {} = {}".format(x, result))
        break;
 #   except Exception: #상위 클래스. = 상위클래스는 하단에 넣어야한다.
 #       print("예외입니다.")
    except ValueError : #하위 클래스.
        print("유효한 정수를 다시 입력하세요")
    except ZeroDivisionError : # 하위클래스
        print("0으로 나눌 수 없습니다. 다시 입력 하세요.")

+) 예외 별로 처리하기
try 블록에서 발생할 수 있는 예외가 여러 개일 경우 각각의 예외를 처리하도록 catch 블록을 정의해 놓을 수 있음

+)다중 예외 처리하기
- except 절에 여러 예외를 지정
- except 절은 여러 예외를 괄호로 묶은 튜플로 지정 할 수 있음

ex>
except (ValueError, ZeroDivisionError) : 
    print('유효한 수가 아닙니다. 다시 시도하세요')

+)else 이용
- else절은 try절이 예외를 발생시키지 않을 때 실행해야하는 코드에 사용
- else 절은 except 절 다음에 와야 함

ex>
# try ~ except ~ (else) ~ finally
# else 블록 = try 블록에서 예외가 발생하면 except 를 실행,
# 예외가 발생 안되면 else블록 실행.
try:
    f = open("data/ch08.abcd.txt", "r") # 읽기는 r , 쓰기는 w . 원래 내용에 추가는 a .
except FileNotFoundError:
    print("파일이 없습니다.")
else :
    data = f.read()
    print(data)
    f.close() #파일을 닫아야한다. 중요.
finally : #finally 블록은 try블록에 예외가 발생하든 안하는 꼭 실행.
    f.close()

try:
    f = open("data/ch08.abc.txt", "r") # 읽기는 r , 쓰기는 w . 원래 내용에 추가는 a .
    data = f.read()
    print(data)
except FileNotFoundError:
    print("파일이 없습니다.")
finally : #finally 블록은 try블록에 예외가 발생하든 안하는 꼭 실행.
    f.close()

+)예외 인수
- 예외가 발생하면 관련 값이 있음
- 이를 예외의 인수라고 부름
- 예외 객체 변수에는
  instance.args를 가지고 있어
  예외 관련 정보들을 조회할 수 있음

ex>
# 예외인수 e
# # 100을 입력한 정수 값으로 나눠 출력한다. (모든 예외 사항을 하나로 처리.)
# # 100을 입력한 정수 값으로 나눠 출력한다. (두가지 예외 사항을 하나로 처리.)
while True:
    try:
        x = int(input("정수는 ? "))
        print("입력한 정수는 {}입니다.".format(x))
        result = 100 / x
        print("100 / {} = {}".format(x, result))
        break;
    except (ZeroDivisionError,ValueError) as e :
        print(e)
        print(e.args[0]) #e.args => 튜플형식이므로 e.args[0]이용해서 예외메세지를 본다.

3. raise
- raise는 강제로 예외를 발생해야 할 필요가 있을 때 사용
- raise 명령문을 사용하면 프로그래머는 지정된 예외가 발생하도록 할 수 있음

ex>
raise NameError("예외가 발생")

def insert(data):
    if len(data) == 0:
        raise Exception("길이가 0이라 출력할 것도 없습니다.")
    print(data, '를 입력 할께요.')

try:
    insert({})
except Exception as e:
    print(e.args[0])

4. 추상 클래스와 추상 메서드
- 추상(Abstract)은 구체화(Concrete)와 반대의 의미
- 어떤 것이 구체화 되어 있지 않고 추상적으로만 존재
- 추상 클래스(Abstract class)는 객체를 생성할 수 없으며 반드시 상속을 통해서만 사용
- 추상 메서드(Abstract method)는 구현부가 없고 함수 선언부만 존재하는 함수

* 추상 클래스
- 객체를 만들어 사용하지 못하는 클래스
- 반드시 파생클래스를 만들어 사용해야 함

ex>
class AbstractError(Exception):
    "추상클래스를 이용하여 객체를 생성할 때 나는 오류."
    def __init__(self):
        Exception.__init__(self, "Shape는 추상클래스여서 객체 생성 불가")

class Shape:
    def __init__(self):
        raise Exception("Shape는 추상클래스여서 객체 생성 불가")

s = Shape() 
=> 객체 생성 불가.

* 추상 메소드 ; 추상클래스와 추상메서드를 사용하는 이유는? 표준을 정하기 위함
class Circle(Shape):
    def __init__(self, r):
        self.r = r
    def cal_area(self):  # 추상메소드를 갖는 클래스는 객체를 생성하지 못하도록하는것이 원칙.
        return r*r*3.14 # 추상메소드는 자식 클래스에서 재정의해서 사용.
c = Circle(3)


* 사용자 정의 예외
- 새로운 예외 클래스를 생성하여 자신의 예외를 명명 할 수 있음
- Exception 클래스 또는 그 하위 클래스를 상속받아 구현
- 오류에 대한 정보를 추출 할 수 있는 몇 가지 특성 만 제공하도록 구현


5. 파일 정리 작업.
- 자원을 반납하는 코드를 작성하여 프로그램을 더 안정적으로 코딩
- 파일 정리작업 방법
1) 예외처리 시 사용하는 finally 블록을 이용
2) 사전 정의된 정리작업을 위한 with를 이용

ex>
filename = input('파일명은 ?')
try:
    f =open('data/'+filename, 'r')
    lines = f.readlines() #한줄한줄이 리스트형식으로 들어온다.
    print(lines)
except :
    pass
finally:
    f.close()

# with 절 이후에는 자동적으로 close() 를 해준다.

with open('data/ch08.abc.txt', 'r') as f: # f =open('data/'+filename, 'r') 와 같은내용.
    lines = f.readlines()
    print(lines)

