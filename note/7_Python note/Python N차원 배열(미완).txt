Python N차원 배열 다루기.

1. 넘파이 소개
- 넘파이(NumPy - http://www.numpy.org)
- 파이썬을 사용한 과학 컴퓨팅의 기본 패키지
- 넘파이 기능
   N 차원 배열 객체
   C/C++, 포트란(Fortran) 코드 통합 도구
   선형 대수학(Linear algebra)
   푸리에 변환(Fourier transform)
   난수(Random number) 기능

- 넘파이의 주요 객체는 동종(homogeneous)의 다차원 배열
  모든 데이터가 같은 타입인 테이블

- 넘파이의 차원들은 축(axis)으로 불림

ex>
import numpy as np  # 패키지 import

* 넘파이 주요 함수

용도 넘파이 주요 함수
- 배열 만들기 :  arange, array, copy, empty, empty_like, eye, fromfile, fromfunction, identity, 
	      linspace, logspace, mgrid, ogrid, ones, ones_like, r, zeros, zeros_like
- 모양 바꾸기 : ndarray.astype, atleast_1d, atleast_2d, atleast_3d, mat

- 배열 조작하기 : array_split, column_stack, concatenate, diagonal, dsplit, dstack, hsplit, hstack, 
	          ndarray.item, newaxis, ravel, repeat, reshape, resize, squeeze, swapaxes, take, 
	          transpose, vsplit, vstack
- 찾기 : all, any, nonzero, where
- 정렬하기 :  argmax, argmin, argsort, max, min, ptp, searchsorted, sort
- 배열 운영하기 :  choose, compress, cumprod, cumsum, inner, ndarray.fill, imag, prod, put, putmask, real, sum
- 기초 통계 :  cov, mean, std, var
- 선형 대수 : cross, dot, outer, linalg.svd, vdot

1-2. ndarray 속성
- ndarray.ndim : 배열의 축수(차원)
- ndarray.shape : 각 차원의 배열 크기를 나타내는 정수 타입의 튜플. 
  shape는 (n, m) 형태. 행렬은 n개의 행과 m개의 열. shape 튜플의 길이는 축의 수(ndim).
- ndarray.size : 배열의 요소의 총수. shape의 각 요소의 곱과 동일.
- ndarray.dtype : 배열 내의 요소의 타입. 파이썬의 기본 타입 또는
  넘파이의타입(numpy.int32, numpy.int16, numpy.float64 등)을 이용해 지정
 *형변환의 개념이 아님. 지정한 타입의 크기만큼 잘라서 해당 타입으로 인식
 *형변환은 astype(t)메서드를 이용
- ndarray.itemsize : 배열의 각 요소의 바이트 단위의 사이즈. 예를 들어, 
  float64 유형의 요소 배열에는 itemsize 8(=64/8)이 있고, 
  complex32 유형에는 itemsize 4(=32/8)가 있음. 이것은 ndarray.dtype.itemsize과 같음.

ex>
a.shape # (3, 5)
a.ndim # 2
a.dtype.name # 'int32'
a.itemsize # 4
a.size # 15
type(a) 


1-3. dtype의 이해

- dtype 속성으로 타입을 지정하면 기존의 데이터들이 새로 바뀌는 타입의 크기만큼 배열에서 취해져 새로운 타입으로 만들어 짐
- 예에서 처음의 배열은 shape가 (3,4) 이고 아이템들의타입이 int32였다면
  이후 dtype을 int64로 지정하면 정수 두 개가 하나의 정수로 만들어 짐
- 이 과정에서 처음의 0과 1은 1과 0값으로 순서가 바뀌어 결합되고 
  이것이 64비트로 표현되어 정수를 계산하므로 1(00000000 00000000 00000000 00000001)과 0이 결합되어
  새로운 2진수 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 이 만들어 지는데
  이것을 10진수로 변환하면 4294967296가 됨
- 마찬가지로 int64 타입으로 변환된 두 번째 데이터는
  2(00000000 00000000 00000000 00000010)와
  3(00000000 00000000 00000000 00000011)이 순서가 바뀌어 결합되어
  00000000 00000000 00000000 00000011 00000000 00000000 00000000 00000010이 만들어지고 
  이것을 10진수로 변환해서 12884901890가 됨

ex>
a = np.arange(12).reshape(3,4)
a

a.dtype
a

2. 넘파이 배열
* 넘파이에서 배열을 만드는 방법
- array 함수를 이용한 다른 파이썬 구조(예: 리스트, 튜플)로부터의 변환
- 넘파이 배열을 생성하는 함수 이용(예: arange, ones, zeros, 등.)
- 특수 라이브러리 함수 (예: random) 이용


- 이 절에서는 array, ones, zeros등 함수들을 이용해서 넘파이 배열을 만드는 방법제시

- 메뉴얼 페이지 https://docs.scipy.org/doc/numpy/index.html

2-1. 넘파이 배열 만들기
- array() 함수를 사용하여 리스트 또는 튜플로부터 넘파이 배열을 생성

numpy.array(object, dtype = None, copy=True)

2-2. 기본값이 있는 배열 만들기
- 초기 특정 값으로 채워진 배열을 만드는 몇 가지 기능을 제공
   zeros() 함수는 0으로 채워진 배열
   ones() 함수는 1로 구성된 배열
   empty() 함수는 초기 내용이 임의이고 메모리의 상태에 따라 달라지는 배열

- 배열의 dtype은 float64
  원한다면 dtype 속성으로 타입을 지정 가능

ex>
np.zeros( (3,4) ) # 3행 4열짜리 2차원 배열(단, 요소값 전체가 다 0 [0. ,])

x = np.zeros( (2,3,4), dtype = np.int16 ) #2면 3행4열짜리 3차원배열
# dtype을 int16로 지정.
print(x)
print(x.dtype)
print(x.itemsize)

np.ones((2,5), dtype = np.int8)

np.empty( (2,3) ) #대부분 튜플로 들어간다.
#empty 는 고정값으로 나오지 않는다.

2-3. 연속된 값을 갖는 배열 만들기
- numpy.arange([start, ]stop, [step, ]dtype=None)
  start부터 stop까지(포함 안 함) step씩 건너뛴 값 목록을 생성
- numpy.linspace(start, stop, num=50)
  start부터 stop까지(포함) num개 목록을 생성

ex>
np.arange(10,30,5, dtype = np.float64)

np.arange(0,2,0.3)

np.linspace(0,2,9)

from numpy import linspace # 해당 패키지에서 해당 함수만 이용하고 싶을때.
linspace(0,2,9)

# linspace 는 많은 수의 점들을 생성할때 유용.
from numpy import pi
x = linspace(0, 2*pi, 100)
print(x)
f = np.sin(x)
# print(f)

2-4. 배열의 차원 변경하기
- 배열은 각 축을 따라 요소 수만큼 주어진 차원을 가짐
- a.ravel() # 차원이 풀린 배열을 반환
- a.reshape(6,2) # shape가 수정된 배열을 반환
- a.T # 전치행렬(transposed) 반환
- reshape() 함수는 차원이 수정 된 배열을 반환하지만 resize() 함수는 배열 자체를 수정

ex>
# np.random.seed(1) 시드값 고정. 
t = np.random.random((3,4)) #3행 4열 2차원 배열(random 수.)
t

t * 10 #요소마다 *10이 된다.

# floor 버림.
a = np.floor(t*10)
a

a.ravel() #차원을 무조건 1차원으로 바뀐다. (단, a가 바뀌는것은 아님.)

a.reshape(2,6) # 2행 6열로. 단, a값이 바뀐게 아니다.
# shape가 수정된 배열을 반환(a는 그대로.)

# a는 3행4열짜리 2차원배열. 2차원배열은 행렬(matrix)로 이해 가능.
a.T # 전치행렬 (행과 열을 거꾸로.)

a.transpose() # 전치행렬을 반환 (단, a의 값은 그대로.)

2.-5. 배열 인쇄
- 배열을 인쇄 할 때 레이아웃
  마지막 축은 왼쪽에서 오른쪽으로 인쇄
  나머지는 위에서 아래로 인쇄
  각 슬라이스는 빈 줄로 구분
- 1차원 배열은 행, 2차원은 행렬, 3차원은 행렬 목록으로 인쇄
- reshape() 함수는 배열의 모양(shape)을 변경

-  numpy.set_printoptions(threshold=None)
  넘파이가 전체 배열을 인쇄하도록 하려면 set_printoptions() 함수를 사용하여 인쇄 옵션을 변경

ex>
# 배열이 너무 커서 인쇄할 수 없는 경우,
print(np.arange(100000))

print(np.arange(10000).reshape(10,1000))

- 상단의 예제처럼, 배열을 출력할때 배열이 너무 커서
- 행이나 열이 너무 길때, 생략된것을 나오게끔 자동으로 건너뛰고 모서리만 인쇄.
- 이동작을 비활성화하고 넘파이가 전체 배열을 인쇄하도록 하려면.
- 인쇄 옵션을 변경. threshold값을 큰 값으로

# np.inf = 무한대
# import sys => sys.maxsize 사용할때 임폴트.
# np.set_printoptions(threshold=sys.maxsize)
np.set_printoptions(threshold=10000)
#내 시스템에서의 sys.maxsize 

np.set_printoptions(threshold=100) # 작은값으로 돌리면.
print(np.arange(10000).reshape(10,1000)) # 다시 ... 생략된다.

2.6 기본연산 동작
1) 요소별로 연산
 산술 연산자는 요소별로 적용

ex>
a = np.array([20,30,40,50])
b = np.arange(4)
print(a)
print(b)

a + b # 요소별로. 0번째끼리 + , 1번째끼리. 즉, 인덱스별로 연산 한다.
a - b
a / b # 0에 가까운 무한대같은 0.0000~ 으로 나오는게 있어서 오류메세지처럼 나온다.
a * b # 요소별 연산.

a = np.array([20,30,40,50])
a < 35 # 요소별 연산
# a 배열에서 35보다 작은값들만 추출.
a[a<35] # True 값들만 나오고 False 값은 안나온다.


2) 행렬의 곱
- 행렬의 곱 계산 : dot() 함수 또는 @ 연산자(3.5 이상)
- 요소별 곱 ' * '


ex>
A = np.array([[1,1],[0,1]]) #2차원
B = np.array([[2,0],[3,4]]) #2차원

print("요소별 곱 A*B = ", A*B, sep='\n')
print("행렬 곱 A@B = ", A@B, sep='\n')
print("행렬 곱 A.dot(B) = ", A.dot(B), sep='\n') #내적.

3) 복합대입연산자의 사용
- += 와 *= 등 복합대입연산자들은 새 배열을 생성하지 않고 기존 배열을 수정하기 위해 사용

ex>
a = np.ones((2,3), dtype=int) #2차원 2행3열 배열.
a.dtype #  int32 형.

b = np.random.random((2,3)) #2차원 2행3열 배열. 
b.dtype # float64형.

b += a

a += b # b(float64) 라서 a+b 는 float64 로 된다.
# 즉, 64비트가 32비트 안에 안들어간다는 오류가 나온다.

4) 배열 요소의 집계
- 배열의 모든 요소의 합계 계산과 같은 많은 단항 연산은 ndarray 클래스의 메소드로 구현되어 있음

ex>
a = np.random.random((2, 3))
a = np.array([[2,2,2,4],
             [4,3,2,1]])

print('a 배열 요소들 전체의 합 : ',a.sum())
print('a 배열 요소들 전체의 최소 : ',a.min())
print('a 배열 요소들 전체의 최대 : ',a.max())

5) 축을 지정한 집계
- axis 매개 변수를 지정하면 배열의 지정된 축을 따라 작업을 적용 함

ex>
a = np.array([[2,2,2,4],
             [4,3,2,1]])

print("a 배열의 행별 합(2열짜리 배열) : ",a.sum(axis=1)) # axis=1 축 수= 1
print("a 배열의 열별 합(4열짜리 배열) : ",a.sum(axis=0)) #axis =0 행 고정.
print("a 배열의 행별 최솟값 : ",a.min(axis=1))
print("a 배열의 열별 최솟값 : ",a.min(axis=0))
print("a 배열의 행별 최솟값 : ",a.max(axis=1))
print("a 배열의 열별 최솟값 : ",a.max(axis=0))

# 누적합
print(a)
a.cumsum(axis=1) # 행별로 누적합
# 2, 4(2+2), 6(4+2), 10(6+4)
# 4, 7(4+3), 9(7+2), 10(9+1)
print(a)
a.cumsum(axis=0) # 열별로 누적합.

2-7 그외 함수
- 수학 함수, 삼각 함수, 비트 함수, 비교 함수, 부동 함수 등이 있음
- 배열의 각 요소마다 적용되어 배열을 출력함

ex>
a = np.arange(3)
np.sqrt(a) #a에 루트씌운다.

np.exp(a) #지수 e의 0승,1승,2승

b = np.array([10,11,12])
np.add(a,b) # a와 b를 더한다. (메모리를 절약하면서.)

+) 출력 인수의 사용
 범용함수들은 함수의 마지막 인수로 결과를 저장할 변수를 지정할 수
있음
 function_name(x1, x2[, output])
 출력 인수의 지정은 많은 양의 데이터를 연산해야 할 경우 메모리를 절
약할 수 있음
 다음 수식들은 모두 동일함
 G = A * B + C
 T1 = A * B; G = T1 + C; del T1
 G = A + B; add(G, C, G)
 G = A * B; G += C

+) 출력 인수의 사용과 메모리 사용량 및 실행시간 비교
- memory_profiler 패키지를 이용한 메모리 사용량 측정
  %memit expression
- 셀 실행시간 측정
  셀의 맨 위에 %%time 입력

# 실행시간과 메모리 사용량의 정확한 비교를 하려면 각각 다른 커널에서 실행시켜야 한다.

ex>
# 메모리 사용량 측정(메모리 프로파일러.)를 로드하고 임의의 데이터 생성후 np.add
# 아나콘다 프롬프트에서 (! pip install memory_profiler) (! ~~) 는 현재 이 코드에서 실행시킨다.
#(! ~~) => 추천하지 않는 방법.

%load_ext memory_profiler
A = np.random.random(100000000)
B = np.random.random(100000000)
C = np.random.random(100000000)

# %%사용시 주석과 같이 사용불가.
# $$time : 셀을 실행할때 소요시간 출력.
# %memit : 메모리 사용량 출력.
# increment: 1434.30 MiB 사용 메모리.
# Wall time: 2.21 s  걸린시간.

%%time
%memit G = A * B + C
print(6)

%%time
%memit T= A*B; G=T+C; del T
print(6)

%%time
%memit T= A*B; T+=C
print(T)

# np.add() 경우 배열별 연산을 할 경우 메모리 절약.

%%time
%memit T= A*B; np.add(T, C, T)
print(T)

+) 넘파이의 범용 함수들
- 범용 함수(ufunc)는 배열 데이터의 연산(array broadcasting), 
  형 변환(type casting) 및 몇 가지 다른 표준 기능을 지원하는 넘파이 배열(ndarrays)에서 작동하는 함수다.
- 범용함수들은 넘파이 배열의 요소별로 작동한다.
- ufunc는 고정 된 수의 특정 입력을 가져 와서 고정 된 수의 특정 출력을 생성합니다.

- 참고
https://docs.scipy.org/doc/numpy/reference/ufuncs.html


* 배열과 스칼라 연산
- 가장 간단한 예제는 배열과 스칼라 값이 연산에서 결합될 때 발생
- 연산 시 메모리 사용량을 줄임

2-8. 브로드 캐스팅

1) 브로드 캐스팅 규칙
- 브로드 캐스팅하려면 연산의 두 배열에 대한 후미 축의 크기가 동일한 크기이거나 둘 중 하나가 1이어야 한다
- 두 배열의 바깥 쪽(또는 다른 모든 바깥 쪽) 작업을 수행하는 편리한 방법을 제공함

ex>
from numpy import array
a = array([[1,2,3]]) # 1차원 경우의 브로드캐스팅. 10+1 , 10+2, 10+3
b = array([[10,20,30]])
np.add(a, 10)

# 2차원 배열의 경우,  두배열의 후미 축(열)의 크기가 동일해야한다.
a = array([[0.,0,0], #4행 3열.
           [10.,10,10],
           [20,20,20],
           [30,30,30]])
b = array([[5,5,5]])
np.add(a, b)      # 5,5,5 + 0,0,0 . 5,5,5+10,10,10. ~~

# 열 갯수가 다를때.
from numpy import array, newaxis
a = array([0,10,20,30])
b = array([1,2,3])
np.add(a,b)
# a+ b 도 불가.

+) newaxis ?
ex>
a[:,newaxis] # 배열의 새로운 축을 추가. 2차원인 4x1 로 생성.

# 4행1열 배열 + 1행 4열 연산.
x = np.add(a[:,newaxis],b)
x



3. 인덱싱과 슬라이싱
- 인덱스는 맨 처음의 인덱스는 0이며 이후로 1씩 증가하도록 양수로 지정하는 것이 일반적임
- 맨 뒤의 항목부터 음수를 이용해 지정할 수 있음

ex>
a = np.arange(10)*3
a
=> array([   0,  3,  6,  9, 12, 15, 18, 21, 24, 27])

양수 인덱스  0   1   2   3   4   5    6   7   8   9
음수 인덱스 -10 -9 -8  -7  -6  -5  -4  -3  -2  -1

1) 인덱싱
- np_array_obj[index] 

ex>
a[2] -> 양수 인덱스로 인덱싱
a[-1] -> 음수 인덱스로 인덱싱
a[10] -> 없는 인덱싱은 에러.

2) 슬라이싱
- np_array_obj[ start : stop ]
  start부터 stop까지(stop 위치 포함 안함) 요소
- np_array_obj[ start : stop : step ] 
  start부터 stop까지(stop 위치 포함 안함) step 마다 요소

ex>
a[2:5] #2번째 인덱스부터 5앞까지

a[0:11:2]  # from , by 생략 가능.
# 슬라이싱은 벗어난 인덱스 값도 가능.

a[::-1] #끝부터 처음까지 거꾸로. => a배열을 거꾸로 출력.

a[:6:2] = -99 # [-99,-99,-99] 를 -99로 가능.


3) 다차원 배열 인덱싱
- 2차원 배열 인덱싱
  np_array_obj[축1인덱스, 축2인덱스] 
- 3차원 배열 인덱싱
  np_array_obj[축1인덱스, 축2인덱스, 축3인덱스] 

ex>
def f(x ,y):
    return 10*x+y

f(2,3)

import numpy as np # int(4bit) 
#(5,4)= 5행4열 짜리 2차원 넘파이배열을 int16type으로 만듬(그 안의 데이터는 f함수에 의해.)
a = np.fromfunction(f, (5,4), dtype=np.int16)
=> array([[ 0,  1,  2,  3],
       [10, 11, 12, 13],
       [20, 21, 22, 23],
       [30, 31, 32, 33],
       [40, 41, 42, 43]], dtype=int16)

#int(32bit)
#(5,4)= 5행4열 짜리 2차원 넘파이배열을 int16type으로 만듬(그 안의 데이터는 f함수에 의해.)
#람다함수 이용.
a = np.fromfunction(lambda x, y : 10*x+y, (5,4), dtype=np.int) 

=>array([[ 0,  1,  2,  3],
       [10, 11, 12, 13],
       [20, 21, 22, 23],
       [30, 31, 32, 33],
       [40, 41, 42, 43]])

a[2,3]
a[-2,-1] # 인덱스는 음수 가능. 음수인덱스는 마지막부터 n번째.
a[5,0] #벗어난 인덱스를 인덱싱 하면 오류.
a[0:10,-1]#마지막 열들만 출력(0행부터 9행까지)

4) 다차원 배열 슬라이싱
- np_array_obj[ start:stop ] 형식과 np_array_obj[ start:stop:step ] 형식 사용
- 차원이 여러 개 인 경우 콤마로 구분해서 각 차원 별로 start, stop 인덱스를 지정

ex>
a[1:4, 0:2] #1~3행 출력. 0~1열까지 출력.
a[1:4, :] # 1~3행 모든열.(마지막 축(열)인덱스 생략 가능)
a[1:4, ] # 1~3행 모든열.(마지막 축(열)인덱스 생략 가능)

5) 축 인덱스의 생략
- 축의 수보다 더 적은 수의 인덱스가 제공되면 누락 된 인덱스는 모든 항목을 선택함
- 넘파이에서 도트를 사용하여 b[i,...] 형식으로 작성

ex>
a[1:4, ...] # 1~3행 모든열 (마지막 축(열)인덱스 생략 가능) => ...  누락된 인덱스의 전체를 의미.
b[0] # 첫번째 축만 쓸 경우.  ,:,: 생략 가능 
b[... , 1]  # ... 은 맨앞이나 맨뒤 둘중 하나만 위치.



+) 두 배열을 쌓아 합치기
1) hstack(), vstack(), dstack()
- hstack()은 배열을 옆에 추가하는 방식으로 쌓아 합침
- vstack()은 배열을 아래에 추가하는 방식으로 쌓아 합침
- dstack()은 3번째 축(depth)을 쌓아 합침

ex>
c = np.arange(24).reshape(2,3,4)
=> array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])

a, b = c[0], c[1] # 0면 = a , 1면 = b
a => array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
b => array([[12, 13, 14, 15],
       [16, 17, 18, 19],
       [20, 21, 22, 23]])

np.vstack( (a,b) ) # 수직쌓기. (튜플만 들어감)
np.hstack( (a,b) ) #수평(열) 합치기
np.dstack((a,b)) #0열끼리, 0면에, 1열끼리 1면, 2열끼리 2면 ~~

2) column_stack()
- column_stack() 함수는 1차원 배열을 열 단위로 배열하여 2차원 배열을 만듬

ex>
a = np.array([1,2,3,4])
b = np.array([5,6,7,8])
c = np.array([9,10,11,12])
np.column_stack( (a,b,c) )
=>array([[ 1,  5,  9],
       [ 2,  6, 10],
       [ 3,  7, 11],
       [ 4,  8, 12]])

np.vstack( (a,b) )
np.hstack( (a,b) )

3) newaxis 속성
- hstack()을 이용해 1차원 배열을 열 단위로 쌓으려면
  newaxis를 이용해서 1차원 배열이 2차원 구조가 되도록 해야 함
- newaxis 속성은 2차원 컬럼 벡터를 갖도록 함

ex>
a[:,np.newaxis]
np.hstack((a[:, np.newaxis], b[:, np.newaxis], c[:, np.newaxis]))
# np.column_stack( (a,b) ) 와 같다.
=>array([[ 1,  5,  9],
       [ 2,  6, 10],
       [ 3,  7, 11],
       [ 4,  8, 12]])
np.column_stack( (a,b,c) )


+)- row_stack(tup) : vstack() 과 같음. 행단위로 쌓아준다.

ex>
np.row_stack( (a,b,c) )
=>array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])

np.vstack( (a,b,c) )
=>array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])

4) stack()
- stack(arr_tup, axis = 0) 함수는 축 속성 axis의 값에 따라 배열을 합침
- arr_tup : 합칠 배열의 모음 (어레이튜플.)
- axis 매개 변수는 결과의 차원에서 새 축의 인덱스를 지정
- axis=0이면 첫 번째 차원, axis=-1이면 마지막 차원


ex>
a = np.arange(12).reshape(3,4)
b = np.arange(12, 24).reshape(3,4)

=> a : array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
b : array([[12, 13, 14, 15],
       [16, 17, 18, 19],
       [20, 21, 22, 23]])

np.stack( (a,b), axis=0 ) # a,b를 차원이 다르게 합친다.(면으로 합침) 결국 2면이 된다.

np.stack( (a,b),axis=1 ) # a,b를 차원이 다르게 행끼리 합침.

np.stack( (a,b),axis=2 ) # 행들을 열로 바꾸고 열끼리 합친다.

np.stack( (a,b),axis = -1 ) # 마지막 차원으로 합친다.

3.2 r_() 함수와 c_() 함수
- r_[] 함수와 c_[] 는 한 개의 축을 따라 번호를 나열해 배열을 만들 때 유용

ex>
ex>
a = np.array([1,2,3,4])
b = np.array([5,6,7,8])
c = np.array([9,10,11,12])

np.r_[a,b,c]
=>array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])


np.c_[a,b,c]
=> array([[ 1,  5,  9],
       [ 2,  6, 10],
       [ 3,  7, 11],
       [ 4,  8, 12]])
# 2차원 으로
np.r_[[a],[b],[c]]
=> array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])


1) hsplit(), vsplit(), dsplit()
- hsplit()함수를 사용하여 반환 할 동등한 모양의 배열 수를 지정하거나 
  나누기를 해야하는 열을 지정하여 가로 축을 따라 배열을 나눌 수 있음
- vsplit() 함수는 세로축을 따라 분할
- dsplit() 함수는 세 번째 축(depth)을 따라 여러 개의 배열로 나눔. dsplit()은 3차원이상 배열에서만 동작

ex>
a = np.arange(12).reshape(3,4)

a_vsplit = np.vsplit(a, 3) #분할된것을 리스트로 출력.
a_vsplit # 가로 축을 따라서 3개의 배열로 출력.

2) hsplit()과 axis=1
- hsplit() 함수는 split() 함수의 axis 매개 변수가 1일 때와 같음
- 배열의 차원에 상관없이 항상 두 번째 축을 이용해 분할

ex>
a_hsplit = np.hsplit(a, 4) # 세로 축을 따라 배열로.

b_split = np.hsplit(b, 3) # 두번째 축(행)을 이용해서 split
b_split                   # 3차원배열 b를 3개의 3차원 배열로 split


b_dsplit = np.dsplit(b, 2) # 3번째 차원을 기준으로 2개의 3차원 배열로 나눔
b_dsplit # 0~9 와 12~21 사이가 떨어진 이유는 서로 면 이라서 떨어진것이다.

3) 인덱스 목록으로 나누기
- 분할하기 위한 인수를 튜플 형식으로 지정하면 해당 인덱스를 기준으로 나눔

4) split()
- split()은 여러 개의 작은 배열로 분할
- vsplit(), hsplit(), dsplit()과 비슷하지만 axis 파라미터를 가질 수 있음

 split(arry, indices_or_section, axis=? )

- axis= 0 : vsplit() 과 동일
- axis= 1 : hsplit() 과 동일
- axis= 2 : 3차원이상에서 동작하며, dsplit() 과 동일
- 2개를 1개씩 나누거나 , 6개를 3개로 나누거나 딱딱 맞아야함. 6을 4로 나눠라 불가.

ex>
a = np.arange(20).reshape(2,10)
np.split(a, 3, axis=1) #에러. 아래와 같은 방법으로 해결가능.
np.split(a, [3, 6], axis=1) # [리스트] or (튜플) 가능.
# [3,6] 나누고자 하는 인덱스.

np.hsplit(a, 3) # 에러, 아래와 같은 방법으로 해결가능.
np.hsplit(a, [3,6]) # => 정확하게 반반으로 나누기 싫을때.

np.vsplit(a, 2)
np.split(a, 2, axis=0)

5) array_split()
- array_split() 함수와 split() 함수의 유일한 차이점은 
  array_split()이 indices_or_sections를 축을 똑같이 나누지 않는 정수로 사용할 수 있다는 것
- n개의 섹션으로 분할 되어야 하는 길이 l의 배열의 경우 (l//n)+1 크기의 l%n 하위 배열과 나머지 크기 l//n을 반환
- 6을 4로 나눠라 가능.

ex>
np.array_split(a, 3, axis = 1)
np.array_split(a, 2, axis = 0)


==4.1 부터 시작

