Python 모듈과 패키지.

1.1 파이썬 모듈
- 모듈은 파이썬 정의와 문장을 담고 있는 파일(함수 또는 변수 정의)
- 파일 이름은 접미어 .py가 추가 된 모듈 이름
- 함수 또는 변수의 정의를 파일에 넣고 스크립트 또는
  인터프리터의 대화형 인스턴스에서 사용하는 방법을 가지고 있음

1.2 파이썬 표준 모듈
 파이썬 라이브러리 레퍼런스(Python Library Reference)에서 설명하
는 표준 모듈 라이브러리를 제공
 일부 모듈은 인터프리터에 내장되어 효율성이나 시스템 호출과 같은 운
영 체제 기본 요소 또는 내장되어 있는 작업에 대한 접근을 제공
 일부 모듈 세트는 기본 플랫폼에 종속
 문자열(string), 날짜(date), 시간(time), 수학(math), 분수(fractions),
랜덤(random), 파일(file), sqlite3, os, sys, threading, unittest, xml,
email, http 등 200여개의 다양한 모듈이 존재
 일부 모듈 세트는 기본 플랫폼에 종속될 수 있음
 파이썬 라이브러리 레퍼런스(Python Library Reference)
 https://docs.python.org/3/library/index.html

1.3 import 하는 방법 : import ~
- import 모듈명
- 모듈 안의 함수들은 모듈 이름을 붙여 사용
ex> import time

+)  from A import B
- from 패키지명 import 모듈명 # 패키지는 directory, 모듈은 .py파일
- from 모듈명 import 함수명
ex> 
from time import ctime
ctime( )

 import A as B
 - import 패키지명 as 패키지별칭
 - import 모듈명 as 모듈별칭
 - A 모듈 또는 패키지의 이름이 길 경우 별칭을 주어 짧게 쓰기 위한 용도로 사용
ex>
import time as f
t.ctime( )

1.4 dir()
- 모듈이 정의한 이름을 정렬된 문자열 목록으로 반환
ex>
import math
print(dir(math))

2. 2절. 사용자 정의 모듈
- 함수나 클래스 등을 파이썬 파일에 저장해서 모듈을 만들고 재사용 할 수 있음.
- 모듈을 가져오는 순서.
  (1)해당 이름을 가진것이 내장모듈. (2)sys.path변수에 저장된 경로.

2.1 모듈 가져오기
- 모듈을 import 
  해당 이름을 가진 내장 모듈 검색, sys.path 변수에 지정된 디렉토리들 검색
- sys.path 초기화
  입력 스크립트가 들어있는 디렉토리
  PYTHONPATH 환경 변수에 지정한 디렉토리
  표준 라이브러리 디렉토리. ex) C:\big/IDE/Python/Python39\Lib
- sys.path
  sys.path.insert(index, path) 또는 sys.path.append(path)로 추가
  sys.path.remove(path)로 제거

ex>
import sys
sys.path.append('C:/pylib')

import fibonacci
fibonacci.fibo1(200)
=> 1 1 2 3 5 8 13 21 34 55 89 144

2.2 모듈 실행
- python fibonacci.py <arguments>

ex>
!python C:\pylib\fibonacci.py

+) if __name__ == "__main__":
-모듈을 실행시킬 때 실행되도록 하려면

ex>
if __name__ == "__main__":
    import sys
    fibo1(int(sys.argv[1]))

!python C:\pylib\fibonacci.py 200
=> 1 1 2 3 5 8 13 21 34 55 89 144

2.4 컴파일된 파이썬 파일
- 모듈 로드 속도를 높이기 위해 파이썬은 각 모듈의 컴파일 된 버전을
   __pycache__ 디렉토리에 module.version.pyc라는 이름으로 캐시
- 파이썬의 버전은 컴파일 된 파일의 형식을 인코딩하고 컴파일된 파이썬
  파일의 이름은 버전 번호를 포함

3절. 패키지
- 패키지(Package)는 “점으로 구분 된 모듈 이름”을 사용하여 파이썬 모듈 네임 스페이스를 구조화하는 방법
- 모듈 이름 A.B는 A라는 패키지에 B라는 서브 모듈을 지정
- 모듈을 사용하면 다른 모듈의 작성자가 서로의 전역 변수 이름을 신경쓰지 않아도 되므로,
  점이 있는 모듈 이름을 사용하면 작성자(author)를 절약 할 수 있음
- 넘파이(NumPy)나 파이썬 이미징 라이브러리(Imaging Library)와 같은 다중 모듈 패키지는,
  서로의 모듈 이름들이 중복 되는 것에 대해 걱정할 필요가 없음

특수 속성들
- init.py # 어느시점인지.
- all # all 에 지정된 모든 것들.
- name # 초기화 작업.
- path # 로드를 할때 해당지점을 지정해준다.
- file


+) 패키지 경로 추가하기
import sys
sys.path.append("C:/pylib")
sys.path

+) import ~
- import 패키지명
- 패키지 사용자는 패키지에서 개별 모듈을 가져올 수 있음
- 상위 패키지를 import 한다고 해서 하위 패키지까지 로드되지 않음
- 한번 로드된 패키지는 다시 로드되지 않음
  다시 로드시키려면 커널을 재시작

ex>
import sample_pac #상위 패키지를 import 한다고 하위 패키지 import 되지 않음.

sample_pac.a.hello() # 이렇게 하위패키지 import 안됐다.

+) 패키지 리로드
- importlib.reload(모듈_또는_패키지명)

ex>
import importlib
importlib.reload(sample_pac)

importlib.reload(sample_pac.ab)

+)from ~ import ~
- from 패키지명 import 모듈명
- 패키지의 하위 패키지 또는 하위 모듈을 가져오는데 사용

ex>
from sample_pac.ab import b
b.world( )

- from 패키지명.모듈명 import 함수명
- 원하는 함수 또는 변수를 직접 가져 오는 것
from sample_pac.ab.b import world
world( )

+) from ~ import *

ex>
import sys
sys.path.append("C:/pylib")
from sample_ab import *

a.Hello( )
=> Hello
b.Hello( )
=> 오류.

+) __init__.py의 __all__ 속성
- 패키지의 __init__.py 파일의 코드에 __all__ 속성으로 모듈의 목록을 정의하면,
  패키지 import *가 발생할 때 가져와야 하는 모듈 이름의 목록으로 간주함

+)내부 패키지 참조
- from module import name 형식의 import 문을 사용하여 상대적인 가져오기를 작성할 수도 있음
- 선행 점(. 또는 ..)을 사용하여 상대 가져 오기에 관련된 현재(.) 및 부모 (..) 패키지를 나타냄

+) 모듈 디렉토리의 패키지 
* __path__ 속성
  - 패키지의 속성
  - 파일의 코드가 실행되기 전에 패키지의 __init__.py를 담고 있는 디렉토리의 이름을 포함하는 리스트로 초기화
  - 수정 가능
    수정하면 패키지에 포함 된 모듈 및 하위 패키지에 대한 향후 검색에 영향을 줌

* 패키지에서 찾은 모듈 세트를 확장하는 데 사용할 수 있음
ex>
mypkg 와 _mypkg_foo라는 패키지를 가지고 있음
_mypkg_foo 패키지는 foo.py 모듈을 포함하고 있음
다운로드되어 설치된 패키지 mypkg는 foo.py 모듈이 없음
mypkg 패키지에는 bar.py 모듈이 있음

from mypkg import foo, bar => mypkg 패키지에는 foo 모듈이 없지만 있는것처럼 사용할 수 있다.

+) 패키지 설치 및 삭제
- 패키지 이름으로 설치
  pip install 패키지명
  conda install 패키지명
- whl 파일을 이용한 설치
  python –m pip install whl파일명
- 패키지 관리
  conda list 패키지명
  conda remove 패키지명

4절. 파이썬 표준 라이브러리
많은 문제를 해결하기위한 표준화 된 솔루션을 제공
=> https://docs.python.org/3/library/index.html
=> https://pypi.org