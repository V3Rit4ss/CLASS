1. JDBC(Java Database Connectivity) 프로그래밍 개념
(1) JDBC(Java Database Connectivity) : 자바 패키지의 일부로 자바 프로그램이 데이터 베이스와 연결되어 데이터를 주고 받을 수 있게 해 주는 프로그래밍 인터페이스이다.
				자바 데이터베이스 프로그래밍 API라고 할 수 있다.  



(2)JDBC프로그래밍 단계와 사용 클래스
①JDBC 드라이버 로드 (JDBC 드라이버를 로드한다) : Class.forName()을 이용. 드라이버 클래스 로딩(드라이버 필요)
	사용 API : Class.ForName()

②데이터베이스 연결 (DB에 연결한다) : DriverManager.getConnection()을 이용해 Connection 객체 생성(접속 URL, id, passwd등 필요)
	사용 API : java.sql.Connection

③Statement 생성 (SQL문을 수행할 객체 생성한다) : SQL을 이용해 DB를 조회하거나 다룸. Statement는 SQL 처리 기본 객체
	사용 API : java.sql.Statement	java.sql.preparedStatement

④SQL문 전송 (SQL문 수행전송하고 결과 받는다): SQL 문 Statement 객체의 executeQuery(), executeUpdate() 메소드를 이용, 데이텁이스로 전달해 처리
	사용 API : java.sql.Statement.executeQuery()	java.sql.Statement.executeUpdate()

⑤결과 받기 : SQL 실행 결과를 반환 받아야 하는 값이 있따면 ResultSet객체로 받음
	사용 API : java.sql.ResultSet

⑥결과 받아 원하는 로직 수행 (수행한 결과를 읽어 원하는 로직을 수행한다 (필요할 때까지 반복)

⑦연결 해제 ( DB 연결을 끊는다) : 사용한 자원을 반납함
	사용 API : java.sql.Connection.close()

2.JDBC 소스
(1)단순 연결
	Class.forName(“oracle.jdbc.driver.OracleDriver”);
	Class.forName(“com.mysql.jdbc.Driver”);
	Connection conn = DriverManager.getConnection(url, uid,pwd); 
	//관계형 데이터베이스 엔진에서 위치을 연결 

url : 사용자 계정
String url = “jdbc:oracle:thin:@127.0.0.1:1521:orcl”;
String url =” jdbc:oracle:thin:@127.0.0.1:1521:xe”;
           프로토콜:서브프로토콜:서브네임(ip주소:포트:DB이름
	uid : user id
	pwd : user password
	conn.close()
①Oracle
	public static void main(String[] args) {
		String driver = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@127.0.0.1:1521:xe";
		Connection conn = null ;
		try {
			Class.forName(driver);// ① 드라이버연결
			System.out.println("드라이버 검색 성공");
			//② 데이터베이스 연결
			conn = 
			DriverManager.getConnection(url,"scott","tiger");
			System.out.println("DB 연결 성공");
			//③SQL실행할 객체생성해서 SQL날리고 결과 받고 쓰기
		} catch (ClassNotFoundException e) {
			System.out.println(e.getMessage()+"드라이버오류");
		}catch (SQLException e) {
			System.out.println(e.getMessage()+"DB연결실패");
		} finally {
			try {if(conn!=null) conn.close(); // 연결 끊기
			} catch (SQLException e) {
				System.out.println(e.getMessage()+"닫기오류");
			}
		}
	}
②Mysql
	public static void main(String[] args) {
		String driver = "com.mysql.cj.jdbc.Driver"; // 8.0
		//String driver = "com.mysql.jdbc.Driver"; // 5.X버전 mysql일 경우
		String url = "jdbc:mysql://127.0.0.1:3306/kimdb?serverTimezone=UTC";
		//String url = "jdbc:mysql://127.0.0.1:3306/kimdb"; // 5.X버전 mysql일 경우
		Connection conn = null;
		try {
			Class.forName(driver); // (1)
			System.out.println("드라이버 연결 성공");
			conn = DriverManager.getConnection(url, "root","mysql"); //(2)
			System.out.println("MySQL 연결 성공");
		} catch (ClassNotFoundException e) {
			System.out.println(e.getMessage());
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if(conn!=null) conn.close();
			} catch (SQLException e) {System.out.println(e.getMessage());}
		}
	}


(2)조회
 Statement객체 : 이전 단계에서 생성한 Connection 객체(conn)로 접근해서 createStatement()메소드를 호출하여 생성한다.
 Statement stmt = conn.createStatement();
 Statement객체로 질의문 수행
 String str = “SELECT * FROM EMP;
 ResultSet rs= stmt.excuteQuery(str);
 rs.next() : 현재행에서 한행 앞으로 이동
 rs.previouse() : 현재행에서 한행 뒤로 이동
 rs.first() : 현재 행에서 첫번재 행의 위치로 이동
 rs.last() : 현재 행에서 마지막 행의 위치로 이동
	rs.cloase() stmt.close() conn.close()

(3)Insert
Stmt.excuteQuery(sql)
검색(Select)시 사용 반환값이 ResultSet
Stmt.excuteUpdate(sql)
입력, 수정, 삭제(insert, update, delete)시 사용. 반환값이 정수형을 반환. 
작업에 성공한 횟수 리턴하여 DML명령어(insert, update, delete)가 제대로 수행되었는지 체크할 수 있다

(4)PreparedStatement 인터페이스 이용
String sql_query = “insert into dept values (?,?,?);
PreparedStatement pstmt = conn.preparedStatement(sql_query);
setXXX(int 순서, 실제 데이터나 변수);
