1. 패턴(디자인 패턴)이란?

패턴(디자인 패턴)이란, 지금 배우고 있는 객체지향 언어를 배우는데 가장 중요한 방법이라고 느낀다.
객체지향이 세상에 등장한 이후로 객체지향 언어의 상속, 인터페이스, 추상화 등의 기능을 이용해서 시간과 인력 투입의 효율을 극대화 하기 위한 방식이 정립되기 시작했습니다.
그리고 이러한 방식을 어떠한 틀로 정해 놓은 것이 바로 디자인 패턴 입니다.

쉽게 정리하면, 과거부터 현재까지의 개발자들이 객체지향 언어의 장점들을 모아 가장 효율적으로 개발을 할 수 있게 만들어 놓은 틀(프레임)입니다.

객체지향 언어의 상속, 인터페이스, 추상화 등등을 배운 상태에서 어떻게 하면 자신이 개발하고 있는 소스에 객체지향적인 요소들을 가미하여 효율적인 개발을 할 수 있는 방법은 바로 
개발자들이 정형화해 놓은 패턴을 배우는 것 이고, 다양한 패턴을 습득하고 나면, 상속과 인터페이스, 추상클래스에 대해서 이해가 빨라진다.
그렇다고  모든 패턴을 다 해야한다는건 무리이다. 패턴의 종류도 많을 뿐 더러, 많은 패턴을 모두 경험했다고 해도, 본인의 개발 소스에 바로 적용하기도 사실상 어렵기때문이다.
패턴을 익히고, 효과적으로 본인의 소스에 적용시키기 위한 최선의 방법은 꾸준히 패턴에 대해서 공부하고, 본인의 개발 소스를 관찰하면서 리펙토링에 관심을 갖는 것이 좋다. 디자인 패턴은 개발자 모두가 공부하고 연구하는 분야이기 때문이다.

2. 싱클톤 패턴 : 싱글톤 패턴(Singleton pattern)이란 어떤 클래스의 객체는 오직 하나인 유일한 객체를 만들어 여러가지 상황에서 동일한 객체에 접근하기 위해 만들어진 패턴이다. 
   [ ***** 실제로 많이 쓰이는 유형이니 꼭 이해해야한다. ***** ]
(하나의 클래스를 통해 obj1, obj2, obj3이라는 객체 생성 시, obj2와 obj3는 전혀 다른 독립체. obj2.i와 obj3.i는 별개였지만, cf. 어떤 클래스는 객체를 유일하게 하나만 만들 수 있다. 어떻게 하나만 만들 수 있는지 알아보자.)

위키백과 를 참조하자면, 싱글턴 패턴(Singleton pattern)을 따르는 클래스는, 생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나이고 이 객체에 접근할 수 있는 전역적인 접촉점을 제공하는 패턴이다.

지금까지의 클래스를 잘 생각해 보면, 클래스를 하나 만들고, 만들어진 클래스로부터 객체를 여러 개 생성하여 사용하였습니다. 하지만 싱글턴 패턴을 이용하면, 클래스 하나에 객체를 유일하게 하나만 생성하여 모든 곳에서 하나의 객체에만 접근할 수 있는데,
	 즉 전역의 개념으로 객체를 사용할 수 있다.
(하나의 클래스를 통해 obj1, obj2, obj3이라는 객체 생성 시, obj2와 obj3는 전혀 다른 독립체. obj2.i와 obj3.i는 별개였지만, cf. 어떤 클래스는 객체를 유일하게 하나만 만들 수 있다. 어떻게 하나만 만들 수 있는지 알아보도록 하자.)

싱글턴 패턴(Singleton pattern)을 따르는 클래스는, 생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나이고 이 객체에 접근할 수 있는 전역적인 접촉점을 제공하는 패턴이다.

지금까지의 클래스를 잘 생각해 보면, 클래스를 하나 만들고, 만들어진 클래스로부터 객체를 여러 개 생성하여 사용하였습니다. 
하지만 싱글턴 패턴을 이용하면, 클래스 하나에 객체를 유일하게 하나만 생성하여 모든 곳에서 하나의 객체에만 접근할 수 있습니다. 
즉 전역의 개념으로 객체를 사용할 수 있습니다.



3. 스트레티지 패턴(Strategy Pattern)
기능 하나를 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 만든다.
스트래티지를 활용하면 기능(알고리즘)을 사용하는 클라이언트와는 독립적으로 기능(알고리즘)을 변경할 수 있다.

쉽게 말하면, 어떤 객체를 만들 때 객체가 가지는 기능들이 다양하게 존재할 것 이다.
이러한 기능들을 추상화하여 언제든지 적용할 수 있게 만드는 것. 즉 기능을 부품화, 표준화 한다.
예를 들어 엑센트와 제네시스 자동차가 있다고하자.
엑센트에 들어가는 기어 연결부분과 제네시스에 들어가는 연결부분이 동일하다고(추상화) .
저급기어, 중급기어, 고급기어를 만들어 두고 상황에 따라서 적당한 기어를 적용할 수 있을 것이다.
즉 엑센트에는 저급기어를, 제네시스에는 고급기어를 적용하는 것.
이렇게 기능을 부품화하여 구조를 만드는 것을 스트레티지라고 생각하시면 된다.

1단계 : 각각 SuperRobot, StandardRobot, LowRobot 클래스 정의하고 객체 만들어 쓴다. 세 클래스의 중복된 코드가 많다.

2단계 : SuperRobot, StandardRobot, LowRobot 클래스의 공통점을 갖은 슈퍼클래스 만들고 SuperRobot, StandardRobot, LowRobot은 상속시키고 공통점은 뺀다.

3단계 : 추상클래스로 추상화 한다. 각각 SuperRobot, StandardRobot, LowRobot 클래스의 actionFly(), actionMissile(), actionKnife()메소드는 있고 안의 구현하는 부분만 다르다. 
추상화 시키면 다른 사람이 와서 다른 종류의 로봇을 만든다고 해도 actionFly(), actionMissile(), actionKnife() 은 빼지 않고 넣게 된다. 
혹시 사용자가 ARobot형을 추가 시킨다고 해도 Robot에서 상속받아 쓴다면 반드시 actionFly(), actionMissile(), actionKnife()은 구현하게 된다

4단계 : 3단계에서 좀 더 유연하여, 좀 더 유지보수도 쉽고 추후 업데이트도 쉽게 만들 수 있도록 리펙토링한다
ex.현재는 날수있다없다 에서 저공비행을 한다 고공비행을 한다는 좀더 업데이트된 기능으로 업데이트 할 수 있다고 생각하자
모든 기능을 객체화(부품화) 하였다. // object modularization

간단하게 사람이 맨몸에서 스타일링을 한다고 생각해보자.
이옷을 입었다가 벗었다가 또는 시계를 찼다가 안찼다가.
다리가 부상을 입어서 절룩 거릴수도 휠체어를 탈수도 

개인적으로 실무에서 가장 많이 사용했다고 한다. 알아두면 아주 유용하게 사용할 수 있는 패턴. 
패턴은 한번에 모든 것을 알 수는 없다. 그리고 안다고 하여도 실제 본인의 개발 소스에 적용하기란 쉽지 않으며, 
꾸준히 살펴보고, 고민해 보는 자세가 중요하다고들 한다.

