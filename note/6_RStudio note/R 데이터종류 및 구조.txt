1. R 데이터 종류 및 구조 이해.
R은 데이터 속성에 따라 명명식, 순서식, 구간식, 비율식으로 데이터를 구분한다.
명명식(Nominal)은 명목척도를 나타내며 이름으로 명명되는 자료를 의미한다. 
예를 들면 성별(남,녀)이 명명식에 해당. 

순서식(Ordinal)은 서열척도를 나타내며 순서가 있는 명명식을 의미. 
예를 들면 상, 중, 하 값 중 하나를 갖는 소득 데이터는 순서식에 해당한다. 

구간식(Interval)은 간격척도를 나타내며 순서의 간격을 측정할 수 있는 순서식을 의미한다.
예를 들면 온도가 구간식에 해당.

비율식(Ratio)은 비율척도를 나타내며 절대 영점이 존재해 비율이 의미 있는 구간식에 해당한다. 
예를 들면 체중이 비율식에 해당.

R은 변수 타입에 따라 연속형, 이산형, 범주형 변수로 구분. 
연속형 변수(Continuous)는 체중처럼 연속적인 값을 갖는 변수. 
이산형 변수(Discrete)는 동전의 앞, 뒤처럼 값의 개수가정의된 변수. 
범주형 변수(Categorical)는 연령대 10대, 20대, 등처럼 연속형 변수를 구간으로 묶어서 이산형 변수로 만든 것.

*R은 데이터의 품질에 따라 특이값(Outlier)과 결측값(Missing)으로 구분한다. 특이값은 정상적이지 않은 데이터를 의미.
잘못 측정 된 값이나 오차의 한 값일 확률이 높다. 특이값은 데이터 분석처리시, 제거하고 처리해야 할 수 있다.
결측값(Missing)은 아직 측정되지 않은 값이다. R에서는 NA로 표기 한다.

*R에서 분석용 변수는 요약변수와 파생 변수로 구분.
요약 변수(Summary Variables)는 데이터 분석을 위해서 1차 가공한 변수를 의미한다. 
요약변수는 연속형 변수를 구간화하여 가공했거나, 시계열 데이터를 기간별, 요일별, 주중/주말별로 가공한 데이터이다.
그 외에서 트렌트의 증가액 또는 증감비율, 그리고 SNS 데이터에서 단어의 빈도수 등이 요약변수에 해당.
고객의 나이를 구간화 하여 연령대로 가공했다면 이는 요약변수.
예를 들어 고객에게 상품을 추천하기 위한 시스템의 경우 고객이 구매할 가능성이 있는 상품을 찾기 위해 가중치를 부여한느 변수들이다.
파생변수의 예로는 근무시간, 구매지수, 주 구매 매장, 주 활동 지역, 주 구매상품(10개), 가격 선호대, 시즌별 선호 고객, 행사 민감도,
고객 생애 가치(CLV) 등이 있다. 



2. R 기본 데이터 타입.
R 은 문자(character) ,숫자(numeric) , 논리(logical) 의 3가지 기본적인 데이터타입을 제공한다.
- 문자형은 ("") or ('') 로 묶으며 문자와 문자열의 구분이 없다.
- 숫자형은 정수형과 부동소수점(실수)형 구분이 없다. 기본값은 0.
- 논리형은 TRUE : 참, FALSE : 거짓 의 값을 갖는다. 논리형의 값은 전역변수인 T or F 값을 가질 수 있다. (기본값은 FALSE.)

3. 타입 및 구조 확인.
class() 함수는 타입을 확인한다.
class(a)
>[1] "character" 이런 식으로 타입을 확인 할수있다.

str() 함수는 R객체의 내부 구조를 간결하게 표시한다.


4. Special Values : 기본형 외에 특별한 의미로 사용되는 예약어.
NULL : Empty value 값으로 값이 없음. [is.null() 함수를 사용하여 변수가 가진 값이 NULL인지 확인가능.]
NA : 결측치를 의미. 값이 없다는것이 아닌, 측정이 되지않아 값이 무엇이지 모른자는 의미로 사용. [ is.na(변수) 함수를 사용하여 결측치 여부 확인. ]
=> mean(변수, na.rm = T) : 함수의 na.rm 파라미터가 TRUE이면 NA값은 계산에서 제외한다.
NaN : 변수의 값이 숫자가 아니라는것을 의미. [ is.nan(변수) 함수를 이용하여 NaN 여부를 확인. ]
Inf : 무제한으로 큰 값을 의미 . [ is.finite(변수) 함수를 사용하여 Inf 여부를 확인. ]

ex>
result <-0
add <- function(a,b) {
  result<<- a*5+b  #전역변수 result 에 할당. function 에서만 먹는
#  return(result)
  return() # 리턴을 지정안하면 null 로 되네.
}
(temp <- add(1,2)) # 일반변수 temp에 할당.
(temp <- add(a=1, b=2))
(temp <- add(b=10, a=5)) # b=10 , 5 나머지에 알아서 들어감.
(temp <- add(a=1, b=3)) # NULL : Empty value 
is.null(temp) #is.~ = 타입이냐?

5. 팩터(Factor) : 범주형 데이터 = 명명식,순서식에 쓰인다.
팩터(Factor)는 범주형(Categorical) 변수를  의미. 팩터는 미리 정해진 여러개의 값들중 하나의 값을 가진다.
팩터는 명명식(Nominal) or 순서식(Ordinal) 데티터를 저장한다. 


ex>
gender1 <- c('남','남','여')
gender1[3]
class(gender1)
gender1[4] <- '중성' # 이렇게 값이 추가되는걸 막고싶을때.
gender1
gender1 <- factor(c('남','남','여'), levels=c('남','여'))
class(gender1) # 캐릭터형 으로 안나오고 팩터형으로 나옴
gender1[3] # 남과여 중에 여. 이다.
gender1
str(gender1)
gender1[4] <- '중성' # 추가가 안되는지 확인해보자.
gender1 #결측치가 들어갔다.

level <- factor(c('좋음','보통','보통'), levels = c('싫음','보통','좋음'),ordered=TRUE)
level
level <- ordered(c('좋음','보통','보통'),levels=c('싫음','보통','좋음'))
level
level[4] <-'몰라'
level
nlevels(level) #level 변수의 범주 갯수 수수
nlevels(gender1)
levels(level) #level 변수의 범주들
gender1 <- c('남','남','여')
class(gender1)
gender1 <- as.factor(gender1) #5장 전처리 에서 더 자세히.
gender1


6.구조형 변수와 복합형 변수 = 변수하나에 여러 값을 가져야함.

#(1) 구조형 변수 : 동일자료형이 여러개 ex.)벡터, 행렬(회귀식 용어), 배열
#(2) 복합형 변수 : 서로 다른 자료형을 가질 수 있다. ex.)리스트, 데이터프레임(csv파일을 가지고 할때)

# Scalar (스칼라)와 FactOr (요인)
• Scalar (스칼라)
– 하나의 기본형 데이터를 가지는 변수.
– data <- "Scalar Data"

# Factor (요인)
– 범주형 (Categorical) 변수로, 미리 정해진 여러 개의 값 중 하나의 값을 가진다.
– 명명식(Nominal) 또는 순서식(Ordinal) 데이터를 저장.
– gender <- factor("남", levels=c("남", "여"))

7. Vector (벡터) : 동일자료형의 '집합'
벡터(Vector)는 여러 개의 동일한 형태의 데이터를 모아서 함께 저장되는 세트 또는 집합.
R에서 가장 많이 사용하는 데이터 구조.
- 벡터는 c()함수 안에 원하는 인자들을 나열하여 정의(c는 Combined Value의 약어).
- 나열하는 인자들은 한 가지 유형의 스칼라 타입이여야 한다. 
문자, 숫자, 논리 타입이 섞여있을 경우 문자타입으로 자동 형변환. 
만일 숫자와 논리타입이 섞여 있을 경우 논리값 TRUE는 숫자 1로, 논리값 FALSE는 숫자 0으로 형변환.
- 벡터 내 데이터 접근은 [ ] 안에 색인 요소를 이용. 색인이 음수일 경우 해당 데이터를
제외한다. R의 색인은 1부터 시작한다.
- 벡터의 길이는 length() 또는 NROW()를 이용하여 알 수 있다.
- %in% 연산자는 어떤 값이 벡터에 포함되어 있는지를 알려준다.

data <- c(11,22,33,'test')
data #숫자 , 문자를 동시에 넣으면 문자로 된다.
data <- c(11,22,33, TRUE) # 숫자, logical -> 숫자로.(T:1, F:0)
data
data <- c(TRUE,'test') #logical 과 문자는 문자로.
data

data <- c(1,2,3) #1 인덱스 부터 시작.
data[4] <- 40 #배열이 아니라 언제든지 아무거나 추가가능.
data


7-1 행과 열 정보 조회
NROW(data) #항목의 갯수
length(data) #항목의 갯수

data <- c(1:100) #1~100까지 넣음.
data #[1] [26] ~ 라고 나오는건 한줄에 다 안나올때 해당값의 인덱스 자리를 알려주는것이다.

data <- c(1:4)
data
names(data) <-c('A열','B열','C열','D열')
data

7-2 특정한 값 조회
data[1] #첫번째 값을 조회 하고싶을때. (첫번째 값 반환.)
data['A열'] # A열 값 반환
data[c(1,2)] #첫번째 값과 두번째 값 반환
data[c(1:2)] # 첫번째 부터 두번째 값까지의 값 반환.
data[c('A열','B열')] #A열B열 값 반환
data[-2] #음수일 경우 2번째 제외.
data[data>2] #2보다 큰 값만 반환.
data[c(TRUE,FALSE,FALSE,TRUE)] #TRUE 인 열의 값만 반환.
2 %in% data #data 안에 2가 포함되어 있는지 여부. 있으면 TRUE. 없으면 FALSE T/F

# 벡터를 만들때 c(~~) 로 했는데 다른것도 있다.
class(jumsu) # class함수 이용시 벡터요소의 하나하나의 타입을 알려줌.
is.vector(jumsu) #jumsu 가 벡터이냐? TRUE.


7.3 character()
charArr <- character() # charArr length 가 0인 벡터
is.vector(charArr)
length(charArr)
charArr <- character(5) #length가 5인 벡터
charArr
charArr[1] <- '안녕'; charArr[2]='R'; charArr[3]='수업중'
charArr
charArr[10] <- '테스트'  #도중에 뛰어넘겨서 값을 넣으면 NA 가 들어간다.
charArr

7.4 numeric()
intArr <- numeric()
class(intArr)
is.vector(intArr)
intArr[1] <- 1
intArr[3] <- 3 #[2] 에 안넣고 [3] 에 값을 넣으면?
intArr # 2번은 결측치가 되어진다.

7.5 logical()
logicalArr <- logical(2) #length 가 2인 logical 벡터
logicalArr[1] <- TRUE
logicalArr[2] <- FALSE
logicalArr[3] <- T
logicalArr



8. 벡터의 연산 (+ , - , * , / , 결합, 교집합, 합집합, 차집합, 비교연산)
a <-c(1,2,3)
b <-c(10,20,30)
a+b
a-b
a^b
a*b
a%%b #나머지 연산자.
c(a,b) #벡터의 결합.

a<-c(1,2,3)
b<-c('Hello','R')
c<-c(TRUE,FALSE)
(z<-c(a,b,c)) # 타입이 달라서 문자로 결합됨. (다른 타입의 벡터 결합시. 타입이 바뀜.)

8-1. append() 함수를 이용하여 벡터에 새로운 벡터를 추가할수있다.

a <- append(a,c(4,5,6)) #123 (456)추가.
a <- append(a, 7)
a
a[8] <- 8
a

a <- c(1,2,3,4,5,6)
b <-c(2,4,6,8,10,12)
union(a,b) #합집합. 1 2 3 4 5 6 8 10 12
intersect(a,b) #교집합   2 4 6
setdiff(a,b) #차집합  1 3 5
setequal(a,b) #비교
setequal(a, c(intersect(a,b),setdiff(a,b)))


9. 시퀀스 = 규칙적인 시퀀스를 생성한다. seq() 는 시퀀스를 생성하는 기본함수.
구문에서 by 는 시퀀스의 증가값이다.
seq(from = 1, to=1, by=((to-from)/(length.out-1)), length.out=NULL, along.with=NULL, ...)

ex>
a <- seq(from= 1,to= 10)
a <- seq(from= 1, to= 10, by=2) #1~10까지 2씩 증가.
a <- 1:10
is.vector(a)
seq(10, -10, -2) #10 ~ -10 까지 -2씩.
seq(0,1 ,0.1)
seq(1,9, by=pi)

10. 리피트 = rep()함수는 x 데이터를 반복 출력 하는 기본 함수. rep.int() 및 rep_len() 함수는 두가지 경우에 더 빠른 함수.
rep(x, times=1, length.out=NA, each=1)
rep.int(x, times)
rep_len(x, length.out)

- x = 반복 출력할 데이터.
- times : 반복 출력할 횟수.
- each = each가 지정되면 각 항목이 each 만큼 복제된 다음 times 또는 length.out 만큼 반복출력.
- length.out = 반복 출력할 길이. length.out과 times 가 같이 사용되면 length.outdl 우선 순위를 취하고 times 는 무시된다.

ex>
rep(1:4, each= 2) #11 22 33 44
rep(1:4, c(1,2,3,4)) # 1 22 333 4444
rep(1:4, each= 2, len=6)
rep(1:4, times=2) # 1234 1234

11.List()  리스트
= 리스트(List) 는 복합 구조형의 벡터에 해당하는 데이터 타입.
- List 는 다른 언어에서 흔히 보는 해싱 또는 딕셔너리에 해당한다.
- (키, 값) 형태의 데이터를 담는 연관 배열이다. *연관배열(associative array)
- List 는 list(키=값, 키=값, ... ) 형태로 데이터를 나열해 정의.
- '[색인]'의 형태는 각값이 아니라 '(키, 값)'을 담고 있는 서브 리스트를 반환한다.

student <- list(name='홍길동',age=25)
student
student $name #원하는거 조회.
studentVector <- unlist(student)
studentVector
#studentVector 를 아래처럼 만든것처럼 똑같다.
s <- c('홍길동',25)
names(s) <- c('name','age')
s
student <- as.list(s) #as.list() : list형으로 형변환.
student
student$name #student['name']
student[1] #$name [1] 홍길동
student[[1]] #[1] 홍길동
student$age <- NULL #age 제거.
student

NROW(student) #age 제거되어서 항목의 갯수 1.
length(student) #age 제거되어서 항목의 갯수 1.

unlist() = 리스트를 벡터로 변환.
unlist(data)


12.Matrix(행렬)
= 행렬은 행과 열을  가지는 2차원 배열이다. 벡터와 마찬가지로 행렬에는 한가지 유형의 스칼라 데이터들만 저장할 수 있다.
그러므로 모든 요소가 숫자인 행렬은 가능하지만, '1열은 숫자, 2열은 문자열'과 같은 형태는 불가능하다.

*행렬의 특징.
- 행렬은 matrix() 를 사용해 출력.
- 열 우선으로 채워진다. (행 우선으로 채우기 => byrow=TRUE 속성을 이용.)
- 행렬의 행과 열에 명칭을 부여하고 싶으면, dimnames()를 이용.
- 행렬의 차원은 ncol() 또는 nrow() 을 이용.
- 행렬끼리의 덧셈이나 뺄셈은 + or - 를 이용.
- 행렬의 곱 = %*% .
- ★전치행렬은 t() 로 구분.
- ★역행렬은 solve(행렬).

&행렬을 이용한 선형방정식 풀이.
x <- c(32,64,96,118,126,144,152.5,158) #독립변수
y <- c(18,24,61.5,49,52,105,130.3,125) #종속변수수

X <- matrix(c(x, rep(1, NROW(x))), ncol=2)
X
Y <- matrix(y, ncol=1)
Y
# X %*% ab = Y
#solve(X) #정방행렬이 아니라 역행렬 불가.
#전치행렬을 곱해서 정방행렬.
t(X)
t(X) %*% X #2행 8열 %*% 8행 2열 => 2행2열 정방행렬.

# X %*% ab = Y
#solve(X) #정방행렬이 아니라 역행렬 불가.
#전치행렬을 곱해서 정방행렬.
t(X)
t(X) %*% X #2행 8열 %*% 8행 2열 => 2행2열 정방행렬.

# X %*% ab = Y
# t(X) %*%  X %*% ab = t(X) %*% Y
# solve(t(X) %*% X) %*% t(X) %*% X %*% ab = solve(t(X) %*% X) %*% t(X) %*% Y
# ab = solve(t(X) %*% X ) %*% t(X) %*% Y
ab = solve(t(X) %*% X) %*% t(X) %*% Y
ab
plot(x, y)
lines(x, x*ab[1]+ab[2])

#다변량 에서의 회귀분석 도출.
x1 <- c(60,65,55) #몸무게
x2 <- c(5.5,5.0,6.0) #키
x3 <- c(1,0,1) #흡연유무
y <- c(66,74,78)
X <- matrix(c(x1,x2,x3), ncol=3)
X
Y <- matrix(y, ncol=1)
Y
# X %*% ab = Y 
#solve(X) %*% X %*% ab = solve(X) %*% Y
# ab = solve(X) %*% Y
ab = solve(X) %*% Y
ab


행렬 연산 (+,-,*,/,%%, ~ , %*% ) %*% :행렬 곱.
a <- matrix(1:4, nrow=2 , ncol=2)
a
b <- matrix(seq(10,40,10), nrow = 2, ncol=2)
b
a + b # 같은행 같은열 끼리만 연산.
a * b
a ^ b
a %% b #나머지연산.


13.Array(배열)
= 배열은 3차원 이상의 데이터를 다룰경우에 사용한다. 배열은 array()함수를 이용해서 만들수 있으며,
dim속성을 이용해 차원의 크기를 지정한다.

*dataArray <- array(data, dim=c(행의 수, 열의 수, 면의 수))
ex>
dataArray <- array(1:24, dim=c(3, 4, 2))

- dim() = 차원의 크기 조회
- nrow() = 행의 갯수
- NROW() = 행의 갯수
- ncol() = 열의 갯수
- NCOL() = 열의 갯수
- length() = 각 차원 값의 곱.

dimnames() , rownames(), colnames()

dimnames(dataArray) <- List(c(1,2,3), c('c1','c2','c3','c4'), c('x','y')) = 행의 이름, 열의 이름, 차원 이름 지정.
dimnames(dataArray) = 행렬의 행, 열 이름 출력.

rownames(행렬) = 행렬의 행이름 출력.
rownames(행렬) c('행 이름1','행 이름2','행 이름3') 행이름 지정.
colnames(행렬) c('열 이름1','열 이름2','열 이름3')
colnames(행렬) = 행렬의 열 이름 출력.

+)attr() 함수 = 객체의 속성 변경.
attr() 함수를 이용하면 객체의 속성을 변경 할 수 있다.
attr(객체, "속성이름") <- 속성값
*dataAttry 배열을 행렬구조로 .
-> 
(attr(dataArray), "dim") <-c(3,8).

14.데이터프레임.
데이터프레임 (data.frame)은 2차원 구조이며, 복합형 데이터타입이다.
데이터프레임은 처리할 데이터를 마치 엑셀의 스프레드시트와 같이 표 형태로 정리한 모습을 하고 있다.
데이터프레임의 각 열에는 관측 값의 이름이 저장되고, 각 행에는 매 관측 단위마다 실제 얻어진 값이 저장된다.
행렬은 행렬안의 모든 값이 같은 스칼라타입으로 지정되지만 데이터프레임은 열 단위로 고유한 타입을 가질수 있다는 점에서 차이가 있다.
데이터프레임은 데이터를 가장 자연스럽게 표현하는 데이터타입이기 때문에 R 에서 가장 중요한 데이터프레임타입이며,
많은 R함수 에서 인자로 데이터프레임을 받는다.

data.frame( ... , row.names=NULL, check.rows=FALSE, check.names=TRUE, fix.empty.names=TRUE,
	   stringAsFactors=default.stringAsFactors())

(1) 데이터프레임 생성.
student_id <- c('20211','20212','20213','20214')
student_name <- c('Jin','Eric','Den','Kei')
student_eng <- c(60,85,90,95)
student_kor <- c(100,95,95,80)
student_gender <- c('남','여','남','여')
student_data <- data.frame(student_id,student_name,student_eng,student_kor,student_gender)
student_data

(2)데이터프레임 구조 확인.
str(student_data)

(3)데이터프레임 열 추가.
data$newColumn <- c(...)
(4)데이터프레임 삭제.
data$column <- NULL
(5) rename 함수를 이용한 열 이름 변경.
그전에 reshape 패키지를 설치를 해야하는데 이 패키지 안에 rename 이 있기 때문.
install.packages("reshape") [패키지 설치.]
library("reshape") [패키지 활성화 or 확인]
#require("reshape") 라이브러리 를 하던 require 를 하던 똑같음.
student <- rename(student_data, c("student_name"="name"))
student <- rename(student, c("student_eng"="eng","student_kor"="kor","student_gender"="gender"))
student

(6)데이터프레임 합치기.
cbind() : 두 데이터 프레임을 열 단위로 합친다. 단, 두객체의 행의 수가 같아야한다.
rbind() : 두 데이터 프레임을 행 단위로 합친다. 단, 두객체의 열의 수가 같아야한다.
ex>
x <- rbind(zdata, bdata)

(7)부분 데이터셋 조회
데이터프레임에서 부분 데이터셋을 조회하는 방법은 매우 다양하다.  [ ] 와 색인을 이용하여 원하는 위치의 열과 행 정보를 조회할 수 있다.
[  ]를 이용하여 부분데이터셋을 조회할 때 조회하고 싶은 열 또는 행을 지정할 수 있다. 색인을 음수로 표현하면 해당 행 또는 열을 제외한다.
벡터함수인 c() 를 이용하면 여러 행 또는 열을 지정할 수 있다.

student <- rbind(student, student) #2번 실행 -> 16행
student
nrow(student)
student[1,1] #1행1열.
student[1,'id'] # 1행 'id'열.
student[1,] # 1행 전체. 데이터만.
student[,1] #1열 전체 데이터만.
student[c(1:3),] # 1행부터 3행까지.
student[,c(2,3,4,6)] # 2,3,4,5,6 열의 데이터만.
student[c(-2, -4, -6),] #2,4,6 행외의 모든 데이터만.
student[,c(-1,-5)] #1열과 5열외의 모든 데이터터
student[c(1:3),c(-1,-5)] #1행부터 3행까지 에서 1열과 5열을 뺀 나머지 데이터.

(8) subset()
= subset은 설정하는 조건에 맞는 벡터, 매트릭스 혹은 데이터 프레임을 반환한다.
x에는 벡터, 매트릭스, 데이터 프레임이 모두 들어갈 수 있으며, select는 열을 가지고 있는 데이터 프레임에만 적용.

기본문장.
subset(x, subset=, select= )

#국어점수가 90점 이상인 데이터
help(subset)
subset(student, subset=(student$kor ==100))
subset(student, student$mat > 99) #subset= 생략가능.
subset(student, select = c(1,4)) #1열과 4열 데이터.
subset(student, select = c(-1,-4)) # 1열과 4열을 제외한 데이터.
subset(student, select = c('name','kor','mat')) # 'name','kor','mat'열 만.

#수학점수가 99점 이상인 여학생만 출력.
subset(student, subset = (student$mat >= 99 & student$gender == '여'))


(9) head, tail
= head() 함수를 이용하여 맨 처음 6개 , tail() 마지막 6개 행 을 조회 할 수 있다.
이 둘의 기본값은 6이다. n값을 지정하지 않으면 6개 행이 조회 된다.

ex>
head(student, 2)
tail(student, 3)

(10)edit 
= edit() 함수를 이용하면 데이터 편집기를 실행시킬 수 있다. edit() 함수는 편집한 데이터를 반환하기 때문에 반드시 변수에 할당을 해야
데이터가 데이터 편집기에서 수정한 데이터가 반영된다. 데이터 편집기에서 작업한 내용은 되돌리기(ctrl +z)로 취소 하지 못한다.
그러므로 임시 변수에 데이터를 할당 한 다음 수정한 데이터가 올바른지 확인 한 뒤, 원본 데이터를 변경시키는것이 좋다.


15. 타입 판별.
class(iris) = iris 의 전체 타입이 뭔지 알려준다. 
str(iris) = iris 의 각 행과 열, 타입등등 구조전체를 알수있다.
is.factor(iris$Species) = Species 가 factor 인가? (결과 :  T or F)
is.numeric(iris$Sepal.Length) = Sepal.Length 가 numeric 인가? (결과 :  T or F)
is.character(iris$Species) = Species 가 character 인가? (결과 :  T or F)
is.data.frame(iris) = iris 가 data.frame 인가? (결과 : T or F)

15-1. 타입 변환
= 타입변환은 각 타입에 인자로 변환할 데이터를 넘기거나, as.*( ) 형식 함수를 사용하여 수행 할 수 있다.
as.*( ) 함수로는 as.numeric(  ) , as.factor( ), as.data.frame( ), as.matrix( ) ... ~~ 등 많다.


16. 문자열과 날짜.
(1) 문자열의 길이 알아내기
nchar( ) 사용. => 문자열의 길이를 알아낸다.
length( ) => 는 벡터의 길이를 반환, 문자열
ex> x <- c( 'A' , 'B' , 'C' , 'D' , 'E' )
length( x ) 결과 => [1] 5           * 한마디로 벡터의 갯수를 보여준다.
nchar( x ) 결과 => [1] 1 1 1 1 1  * 단순히 문자열의 길이 갯수를 보여준다.

(2)문자열 연결하기.
paste(  ) = 여러개의 문자열들을 연결. 문자열 사이사이에 기본적으로 공백 삽입. -> sep인수로 기본적인 공백을 수정할수있다.
names <- c("Eric","Larray","Curly")
paste(names,'loves','starts', sep= '_') #사이사이에 _ 붙음.
paste(names,'loves','starts', sep= '_', collapse = ', and ')
paste0(names,'loves','starts') #딱 달라붙음.

(3). 하위 문자열 추출하기.
substr(string, start, end) => start 에서 시작해서 end에서 끝나는 하위 문자열 추출.
?substr => substr 의 정의와 간단 예제 를 볼수있다.
substr('ABCDEF',1,4) #1~4번째 문자 추출
substr('ABCDEF',4,10) #1~10번째 문자 추출, 없는문자는 ""로 처리
substr(names, 1,2) #names 안에 각각의 문자 1~2번째 추출.

(4). 구분자로 문자열 분할하기.
strsplit(string, delimiter) 사용
delimiter(구분자) : 간단한 문자열이나 정규표현식.

path <- 'hong/hadoop/data/spech.csv'
strsplit(path, '/')
customerInfo <- 'jin@naver.com,010-0000-0000,seoul Korea'
strsplit(customerInfo, ',010-0000-0000,')

customers <- c('jin@naver.com,010-0000-0000,seoul Korea', 'yun@naver.com,02-000-0000, pusan Korea'
               ,'su@naver.com,02-0000-0000, Inchon Korea')
strsplit(customers, '[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}')


(5). 하위 문자열 대체하기.
sub(old, new, string) : 첫번째 하위 문자열을 대체.
gsub(old, new, string) : 모든 하위 문자열 대체.

(6). 문자열에서 특수문자 보기.
print() 와 cat() 차이.

print("시험점수는") # "" 등장.
cat("시험점수는") # "" 없음.

(7). 문자열의 모든 쌍별 조합 만들기.
outer(문자열1, 문자열2, paste, sep="")
: 외적을 계산하기 위한 함수. 세번째 인자에 곱셈 대신 다른함수 허용(paste)
: 행렬이 반환됨 (as.vector) 사용.

(8). 현재 날짜 알아내기.
Sys.Date( ) : 현재 날짜(Date 객체) 를 반환.

(9). 문자열을 날짜로 반환하기.
as.Date 사용 - 기본 문자열 형식 : yyyy-mm-dd.
yyyy-mm-dd 가 아닐 경우. 
ex) as.Date("21-04-30", '%y-%m-%d') 
%Y = 년도 4자리. %y = 년도 2자리.
%m = 월.  %d = 일. 

(10) 날짜를 문자열로 변환.
format or as.character 사용.