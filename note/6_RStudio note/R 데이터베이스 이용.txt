R 데이터베이스 이용.
SQL 문으로 데이터프레임과 DB테이블 이용

0. 필요한 패키지 다운과 로드.
install.packages("sqldf")
library(sqldf) 
#sqldf() 함수를 통해 데이터프레임을 DB의 테이블처럼 사용가능.

1. sqldf(x , stringAsFactors=FALSE)
- x : SELECT 문 작성.
- stringAsFactors : TRUE 인 경우, 문자열을 팩터로 읽는다, 기본값은 FALSE.
ex>
sqldf("select * from iris")

1-1. SQL select 구문
다음 구문은 SQL SELECT 문장의 일반적인 구조이다. SELECT 구문의 열 이름에 Sepal.Length 처럼 점(.)이 포함돼 있으면,
열 이름을 이중인용부호("Sepal.Length")로 묶어야 한다.
ex>
sqldf("select * from iris where Species == 'virginica' and `Sepal.Length` >7.5") #(1) (` 필.드명 `) 사용 [  . 때문에 이렇게 쓰인다.]


1-2. 중복행 제거.
distinct 는 중복된 행을 제거하여 한번만 출력되게 합니다.

ex>
sqldf("select distinct Species from iris") #distinct 중복제거

1-3. 데이터 조회 조건지정.
where 절은 데이터를 조회하는 조건을 지정 한다.
ex>
sqldf("select * from iris where species=='virginica'")  #sql문은 대소문자 구분안하니 대문자로 하던 소문자로 하던 상관무. R은 대소문자 구문함.


1-4. 그룹핑
group by 를 이용하면 해당 팩터별로 집계할 수 있다.

ex> 종별 Sepal.Length 의 합(sum)을 출력.
sqldf("select Species, sum(`Sepal.Length`)from iris group by Species")

1-5. 정렬 ( order by )
order by 를 이용하면 정렬하여 데이터 조회 할 수 있다. (desc 는 내림차순으로 정렬.)

ex>
sqldf('select Species, "Sepal.Length" from iris order by "Sepal.Length" limit 5')

sqldf('select Species, "Sepal.Length" from iris order by "Sepal.Length" desc limit 5')

1-6. 데이터 조회 개수 지정.
limit는 일젖ㅇ 개수의 데이터만 출력해준다. limit n 형식은 상위 n개 행을 출력하며, limit m , n 형식은 m번째 행부터 n개 행을 출력한다.
이때 행 번호는 0부터 시작.

ex>
sqldf("select * from iris limit 5")

1-7. sqldf 로  평균, 표준편차 구하기.

ex> iris 데이터에서 종별 꽃잎 (Petal.Length)의 길이 평균과 표준편차를 출력.
sqldf('select avg("Petal.Length") as avg, stdev("Petal.Length") as sd from iris group by Secies')

1-8. 데이터 조인.
두개 이상 데이터셋을 이용하여, JOIN 할 수 있다.

ex>
sqldf("select empno, ename, job, sal,emp.deptno, dname from emp, dept where emp.deptno=dept.deptno")

sqldf("select empno, ename, job, sal, e.deptno, dname from emp e , dept d where e.deptno=d.deptno")



2. RJDBC
R에서 JDBC를 이용하요 데이터베이스를 연결하기 위한 패키지.
RJDEC를 이용하여 데이터베이스에 연결하기 위해서 다음 작업을 해야한다.

1. 패키지 설치 및 로드
2. JDBC 드라이버 클래스 로드
3. 데이터베이스 연결
4. 테이블 데이터 조회
5. 테이블 데이터 수정
6. 테이블베이스 연결 종료


2-1. 드라비어 클래스 로드.
JDBC 드라이버 클래스 파일이 있다면 데이터베이스에 연결하여 데이터를 조회 하거나 조작할 수 있다.
JDBC( ) 함수를 이용하면 JDBC 객체를 생성. R의 JDBC 객체는 JDBCConnection 객체를 생성하기 위해 필요하다.

JDBC(driverClass= "", classPath="")

- driverClass= "driverClassFileName" : JDBC 드라이버 클래스 파일이름을 입력 한다. 오라클 데이터베이스에 접속하려면,
'oracle.jdbc.Oracle.Driver' 를 사용.

- classPath="driverClassPath" : JDBC 드라이버 클래스 파일(jar 파일)의 위치를 입력한다.
JDBC 드라이버 클래스 파일의 경로와 이름을 함께 입력해야 한다. 만일 JDBC 드라이버 클래스 파일이 현재 작업폴더(workplace)에 있다면,
파일 이름만 입력해도 된다.


2-2. 데이터베이스 연결.
R의 JDBC 객체는 JDBCConnection 객체를 생성하기 위한 dbConnect( ) 함수를 가지고 있다.
dbConnect( ) 함수는 JDBC드라이버객체와 데이터베이스 접속 URL, 사용자 아이디와 비밀번호를 인자로 갖는다.
dbConnect( drv, ... )

- drv : JDBC( ) 함수가 반환한 JDBC드라이버 객체.

2-3 테이블 데이터 조회
쿼리문을 실행시키기 위해서 dbGetQuery( ) 함수를 이용할 수 있다.
dbGetQuery( ) 함수는 SELECT 쿼리용으로만 사용할 수 있다. 쿼리문의 실행 결과는 데이터프레임으로 반환된다.
dbGetQuery(con, "statement", ... )
- con : dbConnect( ) 함수가 반환한 JDBCConnection 드라이버 객체.
- "statement" : SELECT 쿼리문.


2-4 테이블 전체 데이터 조회
테이블 전체 데이터를 가져오기 위해서라면 dbReadTable( ) 함수를 사용할 수 있다.
dbReadTable(con, "name", ... )

- con : dbConnect( ) 함수가 반환한 JDBCConnection 드라이버 객체.
- "name" : 데이터베이스 테이블이름을 입력.

2-5 데이터 수정.
데이터를 조작하기 위해서는 dbSendUpdate( ) 함수를 이용해야 한다. dbSendUpdate( ) 함수는 어떤 결과 셋도 반환하지 않는 쿼리문을 실행시킬 때 사용한다.
dbExecute( ) 함수를 사용할 수 있지만, 쿼리문에 이상이 없음에도 실행 시 에러가 출력될때 deSendUpdata( )함수는 좋은 대안으로 사용될 수 있다.
dbSendUPdate(con, "statement", ... )

ex>
dbSendUpdate(con, "update employees set salary=30000 where employee_id=100")


2-6 데이터베이스 연결 종료.
dbDisconnect(con)
*연결해제. select 문은 상관은 별로 없지만, update,delete,insert 는 꼭 연결을 해제해줘야한다.












