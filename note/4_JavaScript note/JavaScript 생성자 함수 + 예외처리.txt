1. 생성자 함수 개요
생성자는 객체지향 프로그램에서 객체를 생성할 때 호출되는 단위 메서드를 말한다.
function 생성자함수명(속성명들) {
            ...
       }
       var 객체명 = new 생성자함수명(속성값들); 
new 키워드로 객체를 생성하므로 생성자함수. 생성자 함수로 만든 객체를 객체 또는 인스턴스라 부른다. 
해당 객체가 어떠한 생성자 함수로 생성됐는지 확인할 때 instanceof 키워드를 사용할 수 있다. 

 <script>
        function Student(name, kor, mat, eng, sci) {  //초기화해준 변수들.
            this.name = name;
            this.kor = kor;
            this.mat = mat;
            this.eng = eng;
            this.sci = sci;
            this.getSum = function () {
                return this.kor + this.mat + this.eng + this.sci;
            };
            this.getAvg = function () {
                return this.getSum() / 4;
            };
            this.toString = function () {
                var output = '';
                for (var key in this) {
                    if (key != 'toString' && key != 'getSum' && key != 'getAvg') {
                        output += key + ' : ' + this[key] + '<br>';
                    } else if (key == 'getSum') {
                        output += '총점 : ' + this.getSum() + '<br>';
                    } else if (key == 'getAvg') {
                        output += '평균 : ' + this.getAvg() + '<br>';
                    }//if
                }//for
                return output;
            }// toString
        }//생성자 함수(Student)

        student = [new Student('홍길동', 80, 65, 77, 90 ),
            new Student('신길동', 40, 80, 70, 60 ),
            new Student('박길동', 80, 60, 80, 30 ),
            new Student('지워줘', 30, 50, 44, 20 )
        ];
+)     student.pop(); //  pop().  지워줘 가 삭제댐. 제일 마지막의 데이터값이 삭제댐.
        student.forEach(function (data, idx) {
            document.write(idx + '번 째<br>' + data + '<br>');
        });

    </script>


2. 프로토타입
일반함수를 사용하여 객체를 만든 것과 생성자함수를 사용하여 객체를 만드는 것의 차이점이 없다. 

Student의 경우 속성은 모든 객체가 다른 속성을 가지지만 메소드는 모두 같다. 
각 객체를 생성할 때마다 동일한 함수를 계속 생성하게 된다 이러한 문제를 해결하고자 포르토타입을 이용한다.

프로토타입이란, 생성자 함수로 생성된 객체가 공통으로 가지는 공간.
메서드를 모두 프로토타입 안에 넣어준다. 프로토타입은 우리가 만드는 것이 아니다. 
함수안에 자동으로 만들어지는 배열 arguments와 마찬가지로 자바스크립트의 모든 함수는 prototype 객체를 갖는다.


    <script> //공유영역을 프로토타입. 프로토타입이란, 생성자 함수로 생성된 객체가 공통으로 가지는 공간.
        function Student(name, kor, mat, eng, sci) { //생성자 함수 .
            this.name = name;  //공통부분x 인 것들만 이안에 넣음.
            this.kor = kor;  //데이터 추가할 공간.
            this.mat = mat;
            this.eng = eng;
            this.sci = sci;
        }
        //공통부분. replaceAll (함수들.) 여기다가 만들어야함.
        Student.prototype.getSum = function () {
            return this.kor + this.mat + this.eng + this.sci; //this.꼭 붙혀야함. 안그럼 일반 스트링으로 인식함.
        };
        Student.prototype.getAvg = function () {
            return this.getSum() / 4;
        };
        Student.prototype.toString = function () { //toString 이름을 바꾸면 안댐.
            var output = '';
            for (var key in this) {
                if (key != 'toString' && key != 'getSum' && key != 'getAvg') {
                    output += key + ' : ' + this[key] + '<br>';
                } else if (key == 'getSum') {
                    output += '총점 : ' + this.getSum() + '<br>';
                } else if (key == 'getAvg') {
                    output += '평균 : ' + this.getAvg() + '<br>';
                }//if
            }//for
            return output;
        }; //생성자 함수와 prototype의 함수 완성.

        var students = [];
        students.push(new Student('신길동', 40, 80, 70, 60));
        students.push(new Student('오길동', 90, 80, 50, 100));
        students.push(new Student('박길동', 80, 60, 77, 95));
        students.push(new Student('이길동', 90, 87, 49, 60));
        students.push(new Student('길길동', 60, 90, 88, 38));
        students.forEach(function (data) {
            document.write(data + '<hr>');

        });
        students[0].kor = 0; students[0].mat = 0; students[0].eng = 0; students[0].sci = 0;   //원래 이 전체가. 캡슐화가 되지 않았다. 자바의 프라이빗처럼이 아니라는것.!
        document.write('<h2>신길동 점수 변동 후</h2>');
        document.write(students[0]);
    </script>


3. 캡슐화 ; 만일의 상황을 대비해서 특정 속성이나 메서드를 사용자가 바로 사용할 수 없게 막는 기술이다. 
   숨겨 놓은 특정 속성은 getter와 setter를 이용하여 간접적으로 접근할 수 있다.

캡슐화 전.
<script>
        function Rectangle(width, height) {
            this.width = width;
            this.height = height;
        }
        Rectangle.prototype.getArea = function () {
            return this.width * this.height;
        };

        var rect = new Rectangle(5, 7); //가로5 세로7짜리.
        document.write('가로 : ' + rect.width + ', 세로 : ' + rect.height);
        document.write('넓이 : ' + rect.getArea());    //캡슐화 전.
    </script>

3-1 캡슐화 적용 & 예외 처리.
<script>
        function Rectangle(w, h) {
            if (w < 0) { //음수 값일때
                throw '음수는 들어갈 수 없습니다.'; //예외 발생. 자바의 예외처리 생각 ㄱㄱ
            } else { //음수 값이 아닐때.
                var width = w;
            }
            if (h < 0) {
                throw '음수는 들어갈 수 없다고 했습니다.';  //예외발생  예외도 각자의 타입이 다 있다. 궁금하면 자바 ㄱㄱ
            } else {
                var height = h;
            }
            this.getWidth = function () {
                return width;
            }
            this.getHeight = function () {
                return height;
            }
            this.setWidth = function (w) {
                if (w < 0) {
                    throw '음수값으로 수정 할 수 없습니다.';
                } else {
                    width = w;
                }//음수 if -else 예외
                
            } //this.setWidth
            this.setHeight = function (h) {
                if (h < 0) {
                    throw '음수 값으로 수정 할 수 없습니다.';
                } else {
                    height = h;
                } //음수 if-else 예외
                
            } //this.setHeight
        }
        Rectangle.prototype.getArea = function () {
            return this.getWidth() * this.getHeight();
        };  //생성자 함수와 프로토타입 완성.

========== 예외처리.  ======================

        try {
            var rect = new Rectangle(5, 7);
        } catch (e) {  //Exception 이라는 타입이 없으니 변수 e 만 적는다.
            location.href = '(4)공사중.html';
        }
        document.write('rect 의 가로 길이 : ' + rect.getWidth() + '<br>');
        document.write('rect 의 세로 길이 : ' + rect.getHeight() + '<br>');
        document.write('rect 의 넓이 : ' + rect.getArea() + '<br>');
        try {
            rect.setWidth(1); rect.setHeight(-7); //음수를 넣었을때. 음수일때 이밑의 결과는 안나온다. 즉, 멈춤. f12 눌렀을때 thow 절로 가르킬텐데 그쪽을 고치면 안됀다.
        } catch (e) {
            document.write('<h6>' + e + ' 수정안됨.</h6>'); //특정한 것을 넣고싶으면 넣어서 보여줄수있다.
        } 
        
====================================
        document.write('<h2>수정후</h2>');
        document.write('rect 의 가로 길이 : ' + rect.getWidth() + '<br>');
        document.write('rect 의 세로 길이 : ' + rect.getHeight() + '<br>');
        document.write('rect 의 넓이 : ' + rect.getArea() + '<br>');
    </script>

예외처리 ?

- 프로그램이 실행되는 동안 문제가 발생하면 프로그램이 자동으로 중단. 이러한 때 프로그램이 중단하지 않고 대처할 수 있게 처리하는 것을 예외처리라 한다.
- 예외가 발생하는 이유 ①잘못된 코드 작성 ②사용자가 개발자가 원하지 않는 방향으로 프로그램을 사용했을 때

※ 오류와 예외의 차이 : try catch구문으로 해결할 수 있는 것은 예외이고 해결할 수 없는 것은 오류.
※ 예외 강제 발생
<script>
        try{
            throw '강제로 예외 발생';
        } catch (exc) {
            if (exc == '강제로 예외 발생')
                alert('강제로 예외 발생 실험');
        } finally {
            alert('예외 발생 가능 부분을 통과했습니다');
        }
    </script>

4. new 키워드.
new 키워드로 함수를 호출하면 객체를 위한 공간을 만들고 this 키워드가 해당 공간을 의미한다. 
그렇지 않는 경우, 일반적으로 this 키워드를 사용하면 window 객체를 나타낸다. Window 객체에 속성을 추가한 것이 된다.

<script>
        function Constructor(value) {
            this.value = value;
        }
        var constructor = new Constructor('Hello');
        alert(constructor.value);
  </script>
<script>
        function Constructor(value) {
            this.value = value;         // this.value는 window.value
        }
        var constructor = Constructor('Hello'); //일반 함수가 되고
        alert(constructor);
   </script>

5. 상속 ; 기존의 생성자 함수나 객체를 기반으로 새로운 생성자 함수나 객체를 쉽게 만드는 것.
하지만, 자바 스크립트에서 정확한 상속 방법은 없다. 
상속이 됐다 안 됐다의 기준은 square instanceof Rectangle이 true이면 상속되었다고 판단한다.

function Rectangle(w, h) {
            if (w < 0) { //음수 값일때
                throw '음수는 들어갈 수 없습니다.'; //예외 발생. 자바의 예외처리 생각 ㄱㄱ
            } else { //음수 값이 아닐때.
                var width = w;
            }

            var height = h;

            this.getWidth = function () {
                return width;
            }
            this.getHeight = function () {
                return height;
            }
            this.setWidth = function (w) {
                if (w < 0) {
                    throw '음수값으로 수정 할 수 없습니다.';
                } else {
                    width = w;
                }//음수 if -else 예외

            } //this.setWidth

            this.setHeight = function (h) {
                    height = h;
            } //this.setHeight

        }
        Rectangle.prototype.getArea = function () {
            return this.getWidth() * this.getHeight();
        };  //생성자 함수와 프로토타입 완성
        function Square(lenght) {
            this.base = Rectangle; // Rectangle 의 하던짓을 얘가 다 한다.
            this.base(lenght, lenght);
        }
        Square.prototype = Rectangle.prototype; //랙탱글의 프로토타입도 다 가져온다.

        var rect = new Rectangle(6, 10);
        document.write('rect의 넓이 : ' + rect.getArea() + '<br>');
        var square = new Square(10);
        document.write('Square의 넓이 : ' + square.getArea() + '<br>');  //상속이 없지만 상속같이 만들 수 있다.
        
    </script>