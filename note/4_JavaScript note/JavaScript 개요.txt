1.1 자바 스크립트의 역사
넷스케이프사에서 모카라는 이름으로 시작.
이후, 썬마이크로시스템에서 개발한 자바 프로그래밍 언어와 이름을 같게 하는 마케팅 조약을 채결했을 뿐 자바와 완전히 다른 프로그래밍 언어.

1.2 자바 스크립트의 활용
초기 웹은 정적 글자로만.
자바 스크립트가 나오고부터 웹 문서의 내용을 동적으로 바꾸거나 사용자가 마우스를 클릭하는 것 같은 이벤트를 처리할 수 있는 해준다
인터넷 속도가 점점 빨라지면서 웹 문서는 더 많은 자료를 가지고, 웹은 일반적인 웹 문서의 개념을 초월해 일반적인 애플리케이션의 모습에 점점 가까워졌고, 이를 ‘웹 애플리케이션’이라 부른다.
어떠한 앱 애플리케이션은 인터넷에 연결되지 않아도 웹 브라우저에서 실행할 수 있다. 웹 애플리케이션은 노트북, 데스크톱, 스마트폰 등 모든 장치에서 사용할 수 있다.

1.3 HTML 파일 만들기
HTML 5에서는 script태그에 type 속성을 적지 않는 게 원칙
HTML페이지의 각 태그는 웹 브라우저에 의해 순차적으로 실행. 웹 브라우저는 head태그를 먼저 읽은 후 body 태그를 읽으므로 script 태그를 head에 넣으면 body읽기전에 실행. 반대로 body에 넣으면 head실행 후 실행.

<!-- html 주석 -->
    <script> //동적인 부분.
        // =  한줄 주석
        /*  = 여러줄 주석
         */
        // name = var 생략 가능.  '' = "" 같음. 둘중에 하나만 골라서 쓰되 '' or "" 각각 써야할때가 있음.
        var name = prompt("이름을 입력하세요", "홍길동");
        if (name == 'null') {
            alert('이름 입력후 확인을 눌러야지 취소를 왜 눌러');
        } else {
            alert("'" + name + "'" + "님 어서오세요");   //"'"+name+"'"  '"'+name+'"'
        }

변수를 선언한것은 script 끝까지 적용이 되기에 변수선언을 할때나 변수를 추가할때 유의해야한다.

script태그를 head 안에 넣어야 코드를 살펴보기 편하므로 특수한 경우가 아니면 대부분 script를 head 안에 위치시킨다.

<script>
        document.write('<h2>첫번째 줄</h2>');  // body에 쓴것처럼 나오지만 순서는 이게 제일 먼저 나옴.
    </script>

script 태그는 head 부분, body 에 올수있고, </html> 끝나는 밑에부분도 올수있다.


1.4 오류확인 방법
  오류를 확인하는 가장 좋은 방법은 크롬에서 F12를 누르는 것을 제일 추천. 코드에 오류가 있다면 우측하단에 경고가 뜬다. 이 경고를 누르면 코드는 몇번째 코드의 몇번째 줄에서 오류가 발생했는지 확인할 수 있다.
  또는 alert(1); 를 코드 사이 하나하나 넣어서 확인하는 방법도 있다.

Elements : 페이지 내의 문서 객체와 관련된 모든 속성을 실시간으로 확인할 수 있다.
Resources : 페이지를 실행하면서 불러들인 모든 리소스 파일을 살펴볼 수 있다. (추가로) HTML5 데이터베이스와 로컬 저장소, 쿠키, 캐시를 표시한다.
Network : Ajax를 포함한 모든 HTTP 요청을 확인할 수 있다.
Sources : 자바스크립트와 관련된 디버깅을 수행한다.
Timeline : 각 요소에 어느 정도의 시간이 걸리는지 확인할 수 있다.
Profiles : 자바스크립트를 분석할 때 도움을 주는 기능.
Audits : 페이지를 최적화 하기 위한 정보를 제공합니다.
Console : 콘솔 로그를 확인할 수 있고, 프로그램이 실행된 상태에서 자바스크립트 코드를 입력할 수 있다.

인터넷 익스플로어: 인터넷 옵션 중 “스크립트 디버깅 사용 안 함과 스크립트 디버깅 사용 안 함(기타) 해제