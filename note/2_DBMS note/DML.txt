DML

DML  :  Data Manipulation Language ; 데이터 검색, 수정 등
  INSERT : 데이터베이스 객체에 데이터를 입력
  DELETE : 데이터베이스 객체에 데이터를 삭제
  UPDATE : 기존에 존재하는 데이터베이스 객체 안의 데이터수정
  SELECT : 데이터베이스 객체로부터 데이터를 검색

--DML : SELECT , INSERT , UPDATE, DELETE
--(1) INSERT INTO 테이블이름 (필드명1 , 필드명2, ~~~~)   값1 -> 필드명1 , 값2 -> 필드명2 , 값3 -> 필드명3 ~~~~~
       --            VALUES (값1, 값2 , ~~~~~);
       
--    INSERT INTO 테이블 이름 VALUES (값1, 값2, ~~~); 

테이블이름 후에 필드명을 기입할때 생략이 가능하지만 생략을 하게되면 필드값이 기본적으로 다 오기때문에
값을 넣을때 필드명에 맞게 값을 넣어야한다.

 COMMIT; --DML 명령어 에서만 가능.  DML 명령어는 트랜젝션 단위로 진행. 현 트랜젝션의 작업을 반영.
 ROLLBACK; --트랜젝션 안에 있는 DML 명령어를 취소

-- (2) UPDATE 테이블이름 SET 필드명1= 값1, 필드명2 = 값2 ~~~~ WHERE (바꿀 행의 조건);  

(*) UPDATE문은 테이블에 저장된 데이터를 수정하기 위해서 사용한다.
(*) UPDATE 문은 기존의 행을 수정하는 것이다. 따라서 어떤 행의 데이터를 수정하는지 WHERE절을 이용하여 조건을 지정한다.
(*) WHERE 절을 사용하지 않을 경우 테이블에 있는 모든 행이 수정된다.
(*) 정말 테이블 전체 행을 수정하려고 했던 것이 아니라면 큰 문제가 발생하므로 WHERE 절의 사용 유무를 신중히 판단하여야 한다.


-- 취소 가능.
--SELECT * FROM EMP01; 추가하기전에 있는지 없는지 확인.

DROP TABLE EMP01; --있다면 지우고.
CREATE TABLE EMP01 
    AS SELECT * FROM EMP;
    
SELECT * FROM EMP01;
--부서번호는 30으로 수정.
UPDATE EMP01 SET DEPTNO = 30;  --WHERE 절이없으면 모든걸 바꿈.
SELECT * FROM EMP01; -- 바로 상위 문장이 활성이 되었는지 확인.

--모든 직원의 급여를 10% 인상 하시오.
UPDATE EMP01 SET SAL = SAL*1.1;  
SELECT * FROM EMP01;

-- 특정 행의 데이터만 수정하고자 할때는 WHERE 절 추가.
-- 10번 부서 직원의 입사일을 오늘로 바꾸고 , 30번 부서로 바꿔라.
UPDATE EMP01 SET HIREDATE = SYSDATE, DEPTNO=30 WHERE DEPTNO=10;


(3)DELETE FROM table_name WHERE conditions ;
(*)DELETE 문으로 부서 테이블의 모든 행을 삭제합니다
	--DELETE FROM DEPT01;
(*)부서 테이블에서 30번 부서만 삭제합니다
   --DELETE FROM DEPT01 WHERE DEPTNO=30;
(*)위의 SAM01 테이블에서 직급이 정해지지 않은 사원을 삭제하시오.
	--DELETE FROM SAM01 WHERE JOB IS NULL;
(*)서브쿼리를 이용한 데이터 삭제 : 사원테이블에서 부서명이 SALES인 사원을 모두 삭제합니다
	--DELETE FROM EMP01 WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME=’SALES’);
(*)EMP01 테이블에서 RESEARCH 부서 소속 사원들만 삭제하시오.
	--DELETE FROM EMP01 WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME=’RESEARCH’);


8. 테이블의 제약조건 : DBMS에 부적합한 데이터가 테이블에 삽입되는 것을 방지하기 위해 CONSTRAINT를 사용
(*)테이블에서 행이 삽입, 갱신, 삭제될 때마다 테이블에 설정된 규칙을 적용
(*)다른 테이블에 종속성이 있다면 테이블의 제거를 방지

        (1) 데이터 무결성 제약조건의 종류
	NOT NULL : 이열은 NULL값을 포함하지 않음을 지정
	UNIQUE  : 테이블의 모든 행에 대해 유일해야 하는 값을 가진 열 또는 열의 조합을 지정
	PRIMARY KEY : 유일하게 테이블의 각 행을 식별
	FOREIGN KEY : 열과 참조된 테이블의 열 사이의 외래키 관계를 적용하고 설정
	REFERENCES 예약어 사용: 참조 무결성 제약 조건 지정
	CHECK : 참이어야 하는 조건을 지정

	제약조건은 아니나 쓸 수 있는 것 : DEFAULT